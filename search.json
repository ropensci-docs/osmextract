[{"path":[]},{"path":"https://docs.ropensci.org/osmextract/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/osmextract/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/osmextract/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Gihub Actions build status making changes. recommend tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. difference adopt = operator assignment instead <-. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/osmextract/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note osmextract project released Contributor Code Conduct. contributing project agree abide terms. See rOpenSci contributing guide details.","code":""},{"path":"https://docs.ropensci.org/osmextract/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum question, use case, otherwise bug feature request software . think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/osmextract/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/osmextract/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/osmextract/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Robin Lovelace  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. osmextract Copyright (C) 2019 Robin Lovelace This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"legal-considerations","dir":"Articles","previous_headings":"","what":"Legal considerations","title":"Introducing osmextract","text":"Anyone using OSM data bound law adhere ODbL, means must: Attribute: must attribute public use database, works produced database, manner specified ODbL. use redistribution database, works produced , must make clear others license database keep intact notices original database. Share-Alike: publicly use adapted version database, works produced adapted database, must also offer adapted database ODbL. Keep open: redistribute database adapted version , may use technological measures restrict work (DRM) long also redistribute version without measures. short, publicly using OSM data without attribution selling datasets derived illegal. See License/Use Cases page OSM wiki detailed use cases.","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"main-package-functions","dir":"Articles","previous_headings":"","what":"Main package functions","title":"Introducing osmextract","text":"package composed following main functions: oe_providers(): Show OSM providers available; oe_match(): Match input place one files stored OSM providers; oe_download(): Download chosen file; oe_vectortranslate(): Convert .pbf .gpkg formats; oe_read(): Read .pbf .gpkg files; oe_get(): Match, download, (vector)translate, import data, one step. many users just want get OSM data quickly, oe_get() may sufficient, covered README. demonstrate function turn, following order typically used. can see, name important functions package start oe_* prefix, means can easily use auto-completion features (Rstudio similar IDE(s)).","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"oe_providers-list-providers","dir":"Articles","previous_headings":"Main package functions","what":"oe_providers(): List providers","title":"Introducing osmextract","text":"oe_providers() lists providers currently available version osmextract installed. element column database_name data object packaged osmextract. can read detailed description provider data running, example, ?geofabrik_zones ?bbbike_zones. Perhaps, best known bulk OSM data provider Geofabrik, extracts summarised data.frame packaged object geofabrik_zones. Note addition data frame rows columns, geofabrik_zones also sf object, defined package name. working sf objects, makes sense package loaded: gives access many functions working geographic vector data type provided osmextract. row data sf object contains geometry, representing area covered provider zone, meaning can plot data follows:  plot shows provider divides geographic space discrete chunks. Different providers zoning systems. example:  shown visualisation BBBike.org zones Europe, provider offers rectangular extracts major cities. working adding support manually selected regions BBBike website (see https://github.com/ropensci/osmextract/issues/100). Check “Comparing supported OSM providers” vignette simple guidelines choose best provider.","code":"oe_providers() #> Check the corresponding help pages to read more details about the fields in each database (e.g. ?geofabrik_zones). #>   available_providers          database_name number_of_zones number_of_fields #> 1           geofabrik        geofabrik_zones             475                8 #> 2              bbbike           bbbike_zones             236                5 #> 3    openstreetmap_fr openstreetmap_fr_zones            1135                6 class(geofabrik_zones) #> [1] \"sf\"         \"data.frame\" library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE par(mar = rep(0.1, 4)) plot(st_geometry(geofabrik_zones)) par(mar = rep(0.1, 4)) plot(st_geometry(spData::world), xlim = c(-2, 10), ylim = c(35, 60)) plot(st_geometry(bbbike_zones), xlim = c(-2, 10), ylim = c(35, 60), col = \"darkred\", add = TRUE)"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"oe_match-match-an-input-place-with-an-osm-extract","dir":"Articles","previous_headings":"Main package functions","what":"oe_match(): Match an input place with an OSM extract","title":"Introducing osmextract","text":"function oe_match() takes input string parameter place, returns named list length two URL size (bytes) .osm.pbf1 file representing geographical zone stored one supported providers. example: geographical zone chosen calculating Approximate String Distance (?adist()) input place one fields provider’s dataset. , function selects closest match. default, oe_match() uses name field Geofabrik provider, can select different field via argument match_by. refer providers’ help pages detailed description available fields. using Geofabrik provider, useful interesting alternative field represented (unique unambiguous) iso3166-1 alpha2 codes: scenarios iso3166-1 alpha2 codes geofabrik_data used since per-country extracts (e.g. Israel Palestine): reason, coded function named oe_match_pattern() explore matching operations available providers according pre-defined pattern. returns named list names id(s) supported OSM providers values matched names. example: default field name, can change follows: set full_row = TRUE, oe_match_pattern() return complete row(s) provider’s data: can combine two functions follows: parameter max_string_dist (default value 1) represents maximum tolerable distance input place closest match match_by column. value can always increased help matching operations, can lead false matches: parameter max_string_dist always set 0 match_by argument equal iso3166_1_alpha2 iso3166_2. approximate string distance closest match input place greater max_string_dist, oe_match() also check supported providers. example: Finally, exact match supported providers match_by argument equal \"name\", oe_match() use Nominatim API geolocate input place perform spatial matching operation (explained ):","code":"oe_match(\"Italy\") #> The input place was matched with: Italy #> $url #> [1] \"https://download.geofabrik.de/europe/italy-latest.osm.pbf\" #>  #> $file_size #> [1] 1.7e+09 oe_match(\"Leeds\", provider = \"bbbike\") #> The input place was matched with: Leeds #> $url #> [1] \"https://download.bbbike.org/osm/bbbike/Leeds/Leeds.osm.pbf\" #>  #> $file_size #> [1] 24362749 oe_match(\"RU\", match_by = \"iso3166_1_alpha2\") #> The input place was matched with: RU #> $url #> [1] \"https://download.geofabrik.de/russia-latest.osm.pbf\" #>  #> $file_size #> [1] 3.2e+09 oe_match(\"US\", match_by = \"iso3166_1_alpha2\") #> The input place was matched with: US #> $url #> [1] \"https://download.geofabrik.de/north-america/us-latest.osm.pbf\" #>  #> $file_size #> [1] 8.9e+09 oe_match(\"PS\", match_by = \"iso3166_1_alpha2\", quiet = TRUE) #> Error: No tolerable match was found. You should try increasing the max_string_dist parameter, look for a closer match in another provider or consider using a different match_by variable. oe_match(\"IL\", match_by = \"iso3166_1_alpha2\", quiet = TRUE) #> Error: No tolerable match was found. You should try increasing the max_string_dist parameter, look for a closer match in another provider or consider using a different match_by variable. oe_match_pattern(\"London\") #> $geofabrik #> [1] \"Greater London\" #>  #> $bbbike #> [1] \"London\" #>  #> $openstreetmap_fr #> [1] \"Greater London\" oe_match_pattern(\"Yorkshire\") #> $geofabrik #> [1] \"East Yorkshire with Hull\" \"North Yorkshire\"          \"South Yorkshire\"          #> [4] \"West Yorkshire\"           #>  #> $openstreetmap_fr #> [1] \"Yorkshire And The Humber\" oe_match_pattern(\"Russia\") #> $geofabrik #> [1] \"Russian Federation\" #>  #> $openstreetmap_fr #> [1] \"Russia\" oe_match_pattern(\"Palestine\") #> $geofabrik #> [1] \"Israel and Palestine\" #>  #> $openstreetmap_fr #> [1] \"Israel And Palestine\" \"Palestine\" oe_match_pattern(\"US\", match_by = \"iso3166_2\") #> $geofabrik #>  [1] \"US-AL\" \"US-AK\" \"US-AZ\" \"US-AR\" \"US-CA\" \"US-CO\" \"US-CT\" \"US-DE\" \"US-DC\" \"US-FL\" \"US-GA\" \"US-HI\" #> [13] \"US-ID\" \"US-IL\" \"US-IN\" \"US-IA\" \"US-KS\" \"US-KY\" \"US-LA\" \"US-ME\" \"US-MD\" \"US-MA\" \"US-MI\" \"US-MN\" #> [25] \"US-MS\" \"US-MO\" \"US-MT\" \"US-NE\" \"US-NV\" \"US-NH\" \"US-NJ\" \"US-NM\" \"US-NY\" \"US-NC\" \"US-ND\" \"US-OH\" #> [37] \"US-OK\" \"US-OR\" \"US-PA\" \"US-PR\" \"US-RI\" \"US-SC\" \"US-SD\" \"US-TN\" \"US-TX\" \"US-VI\" \"US-UT\" \"US-VT\" #> [49] \"US-VA\" \"US-WA\" \"US-WV\" \"US-WI\" \"US-WY\" lapply(oe_match_pattern(\"Israel\", full_row = TRUE), function(x) x[, 1:3]) #> $geofabrik #> Simple feature collection with 1 feature and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 34.07929 ymin: 29.37711 xmax: 35.91531 ymax: 33.35091 #> Geodetic CRS:  WGS 84 #>                       id                 name parent                       geometry #> 172 israel-and-palestine Israel and Palestine   asia MULTIPOLYGON (((34.07929 31... #>  #> $openstreetmap_fr #> Simple feature collection with 3 features and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 33.935 ymin: 29.31 xmax: 36.04 ymax: 33.485 #> Geodetic CRS:  WGS 84 #>                       id                 name parent                       geometry #> 116               israel               Israel   asia MULTIPOLYGON (((34.25 31.20... #> 117 israel_and_palestine Israel And Palestine   asia MULTIPOLYGON (((34.115 31.2... #> 118     israel_west_bank     Israel West Bank   asia MULTIPOLYGON (((34.865 31.3... oe_match_pattern(\"Valencia\") #> $geofabrik #> [1] \"Valencia\" #>  #> $openstreetmap_fr #> [1] \"Comunitat Valenciana\" \"Valencia\" oe_match(\"Comunitat Valenciana\", provider = \"openstreetmap_fr\") #> The input place was matched with: Comunitat Valenciana #> $url #> [1] \"http://download.openstreetmap.fr/extracts/europe/spain/comunitat_valenciana-latest.osm.pbf\" #>  #> $file_size #> [1] 109632873 # erroneous match oe_match(\"Milan\", max_string_dist = 2) #> The input place was matched with: Iran #> $url #> [1] \"https://download.geofabrik.de/asia/iran-latest.osm.pbf\" #>  #> $file_size #> [1] 1.85e+08 oe_match(\"Leeds\") #> No exact match found for place = Leeds and provider = geofabrik. Best match is Laos.  #> Checking the other providers. #> An exact string match was found using provider = bbbike. #> $url #> [1] \"https://download.bbbike.org/osm/bbbike/Leeds/Leeds.osm.pbf\" #>  #> $file_size #> [1] 24362749 oe_match(\"London\") #> No exact match found for place = London and provider = geofabrik. Best match is Jordan.  #> Checking the other providers. #> An exact string match was found using provider = bbbike. #> $url #> [1] \"https://download.bbbike.org/osm/bbbike/London/London.osm.pbf\" #>  #> $file_size #> [1] 97431675 oe_match(\"Vatican City\") #> No exact match found for place = Vatican City and provider = geofabrik. Best match is Valencia.  #> Checking the other providers. #> An exact string match was found using provider = openstreetmap_fr. #> $url #> [1] \"http://download.openstreetmap.fr/extracts/europe/vatican_city-latest.osm.pbf\" #>  #> $file_size #> [1] 663447 oe_match(\"Milan\") #> No exact match found for place = Milan and provider = geofabrik. Best match is Iran.  #> Checking the other providers. #> No exact match found in any OSM provider data. Searching for the location online. #> The input place was matched with Nord-Ovest.  #> $url #> [1] \"https://download.geofabrik.de/europe/italy/nord-ovest-latest.osm.pbf\" #> $file_size #> [1] 416306623"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"finding-zones-based-on-geographic-inputs","dir":"Articles","previous_headings":"Main package functions > oe_match(): Match an input place with an OSM extract","what":"Finding zones based on geographic inputs","title":"Introducing osmextract","text":"input place can also specified using sf, sfc, bbox object arbitrary CRS2, documented following example. oe_match() return named list length two URL size .pbf file representing zone geographically contains sf sfc object (error input contained geographical area). input place intersects multiple geographically nested areas argument level equal NULL (default value), oe_match() automatically returns extract highest level. particular, roughly say smaller geographical areas associated higher level(s). example, level = 1 may correspond continent-size extracts, 2 countries, 3 represents regions 4 subregions: multiple OSM extract intersecting input place level, oe_match() return area whose centroid closest input place. specify one geometry sf sfc object, oe_match() select area contains . operations work LINESTRING POLYGON objects: input place can also specified using numeric vector coordinates. case, CRS assumed EPSG:4326: Finally, reduce unnecessary computational resources save bandwidth/electricity, use small OSM extract subsequent sections can matched follows:","code":"milan_duomo = sf::st_sfc(sf::st_point(c(1514924, 5034552)), crs = 3003) oe_match(milan_duomo) #> The input place was matched with Nord-Ovest. #> $url #> [1] \"https://download.geofabrik.de/europe/italy/nord-ovest-latest.osm.pbf\" #>  #> $file_size #> [1] 4.7e+08 yak = c(-120.51084, 46.60156) oe_match(yak, level = 1, quiet = TRUE) #> $url #> [1] \"https://download.geofabrik.de/north-america-latest.osm.pbf\" #>  #> $file_size #> [1] 1.21e+10 oe_match(yak, level = 2, quiet = TRUE) # the default #> $url #> [1] \"https://download.geofabrik.de/north-america/us/washington-latest.osm.pbf\" #>  #> $file_size #> [1] 2.42e+08 oe_match(yak, level = 3, quiet = TRUE) # error #> Error: The input place does not intersect any area at the chosen level. milan_leeds = st_sfc(   st_point(c(9.190544, 45.46416)), # Milan   st_point(c(-1.543789, 53.7974)), # Leeds   crs = 4326 ) oe_match(milan_leeds) #> The input place was matched with Europe. #> $url #> [1] \"https://download.geofabrik.de/europe-latest.osm.pbf\" #>  #> $file_size #> [1] 2.63e+10 milan_leeds_linestring = st_sfc(   st_linestring(     rbind(c(9.190544, 45.46416), c(-1.543789, 53.7974))   ),    crs = 4326 ) oe_match(milan_leeds_linestring) #> The input place was matched with Europe. #> $url #> [1] \"https://download.geofabrik.de/europe-latest.osm.pbf\" #>  #> $file_size #> [1] 2.63e+10 oe_match(c(9.1916, 45.4650)) # Duomo di Milano using EPSG: 4326 #> The input place was matched with Nord-Ovest. #> $url #> [1] \"https://download.geofabrik.de/europe/italy/nord-ovest-latest.osm.pbf\" #>  #> $file_size #> [1] 4.7e+08 # ITS stands for Institute for Transport Studies: https://environment.leeds.ac.uk/transport (its_details = oe_match(\"ITS Leeds\")) #> The input place was matched with: ITS Leeds #> $url #> [1] \"https://github.com/ropensci/osmextract/raw/master/inst/its-example.osm.pbf\" #>  #> $file_size #> [1] 40792"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"oe_download-download-osm-extracts","dir":"Articles","previous_headings":"Main package functions","what":"oe_download(): Download OSM extracts","title":"Introducing osmextract","text":"oe_download() function used download .pbf files representing OSM extracts. takes input URL, parameter file_url, downloads requested data directory (specified parameter download_directory): argument provider can omitted input file_url associated one supported providers. default value download_directory tempdir() (see ?tempdir), , want point directory persist, can add OSMEXT_DOWNLOAD_DIRECTORY=/path//osm/data .Renviron file, e.g. : can always check default download_directory used oe_download() : strongly advise setting persistent directory since downloading converting (see next sub-section) .pbf files expensive operations, can skipped functions detect requested extract already downloaded /converted. precisely, oe_download() runs several checks actually downloading new file, avoid overloading OSM providers. first step definition path associated input file_url. path created pasting together download_directory, name chosen provider (specified provider argument inferred input URL), basename() URL. example, file_url equal \"https://download.geofabrik.de/europe/italy-latest.osm.pbf\", download_directory = \"/tmp/, path built /tmp/geofabrik_italy-latest.osm.pbf. second step, function checks new path/file already exists (using file.exists()) , case, returns path, without downloading anything3. Otherwise, downloads new file (using download.file() mode = \"wb\") returns path.","code":"oe_download(   file_url = its_details$url,    file_size = its_details$file_size,   provider = \"test\",   download_directory = # path-to-a-directory ) usethis::edit_r_environ() # Add a line containing: OSMEXT_DOWNLOAD_DIRECTORY=/path/for/osm/data oe_download_directory() #> [1] \"/tmp/RtmpxXy8FR\""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"oe_vectortranslate-convert-to-gpkg-format","dir":"Articles","previous_headings":"Main package functions","what":"oe_vectortranslate(): Convert to gpkg format","title":"Introducing osmextract","text":"oe_vectortranslate() function translates .pbf file .gpkg format4. takes input string representing path existing .pbf file, returns path newly generated .gpkg file. .gpkg file created directory input .pbf file name. conversion performed using ogr2ogr vectortranslate utility sf::gdal_utils(). decided adopt approach following suggestions maintainers GDAL. Moreover, GeoPackage files database capabilities like random access querying extremely important OSM data (see ). Let’s start example. First, download .pbf file associated example: convert .gpkg format: vectortranslate operation can customised several ways modifying parameters layer, extra_tags, osmconf_ini, vectortranslate_options, boundary boundary_type.","code":"## its_pbf = oe_download(its_details$url, provider = \"test\", quiet = TRUE) # skipped online, run it locally list.files(oe_download_directory(), pattern = \"pbf|gpkg\") #> [1] \"test_its-example.osm.pbf\" its_gpkg = oe_vectortranslate(its_pbf) #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! list.files(oe_download_directory(), pattern = \"pbf|gpkg\") #> [1] \"test_its-example.gpkg\"    \"test_its-example.osm.pbf\""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"layer-argument","dir":"Articles","previous_headings":"Main package functions > oe_vectortranslate(): Convert to gpkg format","what":"layer argument","title":"Introducing osmextract","text":".pbf files processed GDAL usually categorized 5 layers, named points, lines, multilinestrings, multipolygons other_relations5. oe_vectortranslate() function can covert one layer time. Nevertheless, several layers different names can stored .gpkg file. default, function convert lines layer (common one according experience), can change using parameter layer. .pbf files always contain five layers: , default, oe_vectortranslate convert lines layer: can add another layer follows:","code":"st_layers(its_pbf, do_count = TRUE) #> Driver: OSM  #> Available layers: #>         layer_name       geometry_type features fields crs_name #> 1           points               Point      186     10   WGS 84 #> 2            lines         Line String      189      9   WGS 84 #> 3 multilinestrings   Multi Line String       10      4   WGS 84 #> 4    multipolygons       Multi Polygon      104     25   WGS 84 #> 5  other_relations Geometry Collection        3      4   WGS 84 st_layers(its_gpkg, do_count = TRUE) #> Driver: GPKG  #> Available layers: #>   layer_name geometry_type features fields crs_name #> 1      lines   Line String      189      9   WGS 84 its_gpkg = oe_vectortranslate(its_pbf, layer = \"points\") #> Adding a new layer to the .gpkg file. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! st_layers(its_gpkg, do_count = TRUE) #> Driver: GPKG  #> Available layers: #>   layer_name geometry_type features fields crs_name #> 1      lines   Line String      189      9   WGS 84 #> 2     points         Point      186     10   WGS 84"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"osmconf_ini-and-extra_tags","dir":"Articles","previous_headings":"Main package functions > oe_vectortranslate(): Convert to gpkg format","what":"osmconf_ini and extra_tags","title":"Introducing osmextract","text":"arguments osmconf_ini extra_tags used modify GDAL reads processes .pbf file. precisely, several operations GDAL performs .pbf file governed CONFIG file, can check following link. package stores local copy used standard CONFIG file. basic components OSM data called elements divided nodes, ways relations. Hence, example, code line 7 CONFIG file used determine ways assumed polygons closed. parameter osmconf_ini can used specify path different CONFIG file case need control GDAL operations. See next sub-sections example. osmconf_ini equal NULL (default), oe_vectortranslate() function uses standard CONFIG file. Another example can presented follows. OSM data usually described using several tags, .e. pairs two items: key value. code lines 33, 53, 85, 103, 121 default CONFIG file determines, layer, tags explicitly reported fields, tags stored other_tags column (see details). parameter extra_tags (default value: NULL) governs tags explicitly reported .gpkg file omitted other_tags field. default tags always included (unless modify CONFIG file vectortranslate_options). Please note argument extra_tags ignored osmconf_ini NULL (since know generated new .ini file). Lastly, oe_get_keys() function can used check keys stored other_tags field given .gpkg .pbf file. example, Starting version 0.3.0, set values = TRUE, oe_get_keys returns values associated key (also defined ad-hoc printing method): Check ?oe_get_keys details. can always re-create .gpkg file adding one new tags: Check next sections complex, useful, realistic use-cases.","code":"oe_get_keys(its_gpkg, layer = \"lines\") #>  [1] \"surface\"             \"lanes\"               \"bicycle\"             \"lit\"                 #>  [5] \"access\"              \"oneway\"              \"maxspeed\"            \"ref\"                 #>  [9] \"foot\"                \"natural\"             \"lanes:backward\"      \"lanes:forward\"       #> [13] \"source:name\"         \"step_count\"          \"lanes:psv:backward\"  \"alt_name\"            #> [17] \"layer\"               \"motor_vehicle\"       \"tunnel\"              \"bridge\"              #> [21] \"covered\"             \"incline\"             \"lanes:psv\"           \"service\"             #> [25] \"turn:lanes\"          \"turn:lanes:forward\"  \"frequency\"           \"indoor\"              #> [29] \"lcn\"                 \"level\"               \"maxheight\"           \"operator\"            #> [33] \"power\"               \"source:geometry\"     \"substation\"          \"turn:lanes:backward\" #> [37] \"voltage\"             \"website\" oe_get_keys(its_gpkg, layer = \"lines\", values = TRUE) #> Found 38 unique keys, printed in ascending order of % NA values. The first 10 keys are:  #> surface (91% NAs) = {#asphalt = 12; #paved = 3; #cobblestone = 1; #paving_stones = 1} #> lanes (91% NAs) = {#2 = 9; #1 = 7} #> bicycle (92% NAs) = {#yes = 10; #designated = 5} #> lit (92% NAs) = {#yes = 15} #> access (92% NAs) = {#permissive = 12; #yes = 2} #> oneway (93% NAs) = {#yes = 13} #> maxspeed (93% NAs) = {#30 mph = 12} #> ref (94% NAs) = {#A660 = 9; #4184 = 1} #> foot (95% NAs) = {#yes = 5; #designated = 4} #> natural (96% NAs) = {#tree_row = 7} #> [Truncated output...] its_gpkg = oe_vectortranslate(its_pbf, extra_tags = c(\"bicycle\", \"foot\")) #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file!"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"vectortranslate_options-argument","dir":"Articles","previous_headings":"Main package functions > oe_vectortranslate(): Convert to gpkg format","what":"vectortranslate_options argument","title":"Introducing osmextract","text":"parameter vectortranslate_options used control arguments passed ogr2ogr via sf::gdal_utils() converting .pbf .gpkg formats. utility ogr2ogr can perform various operations translation process, spatial filters queries. operations can tuned using vectortranslate_options argument. NULL (default value), vectortranslate_options set equal c(\"-f\", \"GPKG\", \"-overwrite\", \"-oo\", paste0(\"CONFIG_FILE=\", osmconf_ini),  \"-lco\", \"GEOMETRY_NAME=geometry\", layer). Explanation: \"-f\", \"GPKG\" says output format GPKG. mandatory GDAL < 2.3; \"-overwrite used delete existing layer recreate empty; \"-oo\", paste0(\"CONFIG_FILE=\", osmconf_ini) used modify open options .osm.pbf file set path CONFIG file; \"-lco\", \"GEOMETRY_NAME=geometry\" adjust layer creation options .gpkg file, modifying name geometry column; layer indicates layer converted. Starting version 0.3.0, options c(\"-f\", \"GPKG\", \"-overwrite\", \"-oo\", \"CONFIG_FILE=\", paste0(\"CONFIG_FILE=\", osmconf_ini), \"-lco\", \"GEOMETRY_NAME=geometry\", layer) always appended end vectortranslate_options unless explicitly set different default parameters arguments -f, -oo -lco.","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"boundary-and-boundary_type-arguments","dir":"Articles","previous_headings":"Main package functions > oe_vectortranslate(): Convert to gpkg format","what":"boundary and boundary_type arguments","title":"Introducing osmextract","text":"According experience, spatial filters common operations added (default) vectortranslate process (usually select smaller area lying larger OSM extract). Hence, starting version 0.3.0, defined two new arguments named boundary boundary_type can used easily apply spatial filter directly converting compressed OSM extract. new arguments exemplified next sections can help users creating less verbose vectortranslate_options.","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"other-notes","dir":"Articles","previous_headings":"Main package functions > oe_vectortranslate(): Convert to gpkg format","what":"Other notes","title":"Introducing osmextract","text":"default, vectortranslate operations skipped oe_vectortranslate() function detects file path input file, .gpkg extension layer name parameter layer extra_tags. case, function return path .gpkg file. behaviour can overwritten setting force_vectortranslate = TRUE. arguments osmconf_ini, vectortranslate_options boundary parameters NULL, vectortranslate operations never skipped. Starting sf version 0.9.6, quiet argument equal FALSE, oe_vectortranslate() display progress bar vectortranslate process.","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"oe_read-read-in-osm-data","dir":"Articles","previous_headings":"Main package functions","what":"oe_read(): Read-in OSM data","title":"Introducing osmextract","text":"oe_read() function wrapper around oe_download(), oe_vectortranslate(), sf::st_read(). used reading-.pbf .gpkg file specified using path URL. , example, following code can used reading--gpkg file: input file_path points .osm.pbf file, vectortranslate operations can skipped using parameter skip_vectortranslate. case, oe_read() ignore conversion step. can see output data includes nine fields (.e. default tags), previous example 11 fields (.e. default tags + bicycle foot tags, added .gpkg file chunks ). can also read object starting URL (evaluated ): Please note reading URL linked supported providers, need specify provider parameter. test_its-example.osm.pbf file already exists download_directory, forced download vectortranslate operations.","code":"oe_read(its_gpkg) #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 11 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 oe_read(its_pbf, skip_vectortranslate = TRUE, quiet = FALSE) #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.osm.pbf' using driver `OSM' #> Simple feature collection with 189 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 my_url = \"https://github.com/ropensci/osmextract/raw/master/inst/its-example.osm.pbf\" oe_read(my_url, provider = \"test\", quiet = TRUE, force_download = TRUE, force_vectortranslate = TRUE)"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"oe_get-do-it-all-in-one-step","dir":"Articles","previous_headings":"Main package functions","what":"oe_get(): Do it all in one step","title":"Introducing osmextract","text":"simplify steps outlined , enabling modularity needs , packaged single function works follows:  function oe_get() wrapper around oe_match() oe_read(), summarizes algorithm use importing OSM extracts: Match input place URL .pbf file oe_match(); necessary, download corresponding .pbf file using oe_download(); Convert .gpkg format using oe_vectortranslate(); Read-one layer .gpkg file using sf::st_read(). following commands (evaluated ) show oe_get() can used import OSM extracts associated desired input place, downloading .pbf file performing vectortranslate operations. suggest run commands check output. arguments osmconf_ini, vectortranslate_options, boundary, boundary_type, query wkt_filter (last two arguments defined sf::st_read()) can used optimize process getting OSM extracts R.","code":"its_lines = oe_get(\"ITS Leeds\") #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> The corresponding gpkg file was already detected. Skip vectortranslate operations. #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 11 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 par(mar = rep(0.1, 4)) plot(its_lines[\"highway\"], lwd = 2, key.pos = NULL) oe_get(\"Andorra\") oe_get(\"Leeds\") oe_get(\"Goa\") oe_get(\"Malta\", layer = \"points\", quiet = FALSE) oe_match(\"RU\", match_by = \"iso3166_1_alpha2\", quiet = FALSE)  oe_get(\"Andorra\", download_only = TRUE) oe_get_keys(\"Andorra\") oe_get_keys(\"Andorra\", values = TRUE) oe_get_keys(\"Andorra\", values = TRUE, which_keys = c(\"oneway\", \"surface\", \"maxspeed\"))  oe_get(\"Andorra\", extra_tags = c(\"maxspeed\", \"oneway\", \"ref\", \"junction\"), quiet = FALSE) oe_get(\"Andora\", stringsAsFactors = FALSE, quiet = TRUE, as_tibble = TRUE) # like read_sf  # Geocode the capital of Goa, India (geocode_panaji = tmaptools::geocode_OSM(\"Panaji, India\")) oe_get(geocode_panaji$coords, quiet = FALSE) # Large file oe_get(geocode_panaji$coords, provider = \"bbbike\", quiet = FALSE) oe_get(geocode_panaji$coords, provider = \"openstreetmap_fr\", quiet = FALSE)  # Spatial match starting from the coordinates of Arequipa, Peru geocode_arequipa = c(-71.537005, -16.398874) oe_get(geocode_arequipa, quiet = FALSE) oe_get(geocode_arequipa, provider = \"bbbike\", quiet = FALSE) # Error oe_get(geocode_arequipa, provider = \"openstreetmap_fr\", quiet = FALSE) # No country-specific extract"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"osmconf_ini","dir":"Articles","previous_headings":"Main package functions > oe_get(): Do it all in one step","what":"osmconf_ini","title":"Introducing osmextract","text":"following example shows create ad-hoc CONFIG file, used GDAL read .pbf file customised way. First, load local copy default osmconf.ini file, taken following link. , modify code lines 18 21 asking GDAL report nodes ways (even without significant tag). change also code lines 45 53, removing osm_id field changing default attributes: Another relevant parameter customised creating ad-hoc osmconf.ini file closed_ways_area_polygons (see lines 5-7 default CONFIG file). can now write local copy custom_osmconf_ini file: read Leeds file new osmconf.ini file: compare default output: can see 2 extra features sf object read-using customized CONFIG file (.e. 191 features instead 189 since set \"report_all_nodes=yes\" \"report_all_ways=yes\") just 4 field: highway, lanes (see code chunks ), z_order (check code ), other_tags. Please note argument extra_tags always ignored (warning message), using ad-hoc osmconf.ini file:","code":"custom_osmconf_ini = readLines(system.file(\"osmconf.ini\", package = \"osmextract\")) custom_osmconf_ini[[18]] = \"report_all_nodes=yes\" custom_osmconf_ini[[21]] = \"report_all_ways=yes\" custom_osmconf_ini[[45]] = \"osm_id=no\" custom_osmconf_ini[[53]] = \"attributes=highway,lanes\" temp_ini = tempfile(fileext = \".ini\") writeLines(custom_osmconf_ini, temp_ini) oe_get(\"ITS Leeds\", provider = \"test\", osmconf_ini = temp_ini, quiet = FALSE) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 191 features and 4 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 oe_get(\"ITS Leeds\", provider = \"test\", quiet = FALSE, force_vectortranslate = TRUE) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 oe_get(\"ITS Leeds\", provider = \"test\", osmconf_ini = temp_ini, quiet = FALSE, extra_tags = \"foot\") #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Warning: The argument extra_tags is ignored when osmconf_ini is not NULL. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 191 features and 4 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"vectortranslate_options-boundary-and-boundary_type","dir":"Articles","previous_headings":"Main package functions > oe_get(): Do it all in one step","what":"vectortranslate_options + boundary and boundary_type","title":"Introducing osmextract","text":"parameter vectortranslate_options used modify options passed ogr2ogr. extremely important tune vectortranslate_options parameter, can analyse small parts enormous .pbf files without fully reading memory. first example, reported following chunk, shows use argument -t_srs modify CRS output .gpkg object (.e. transform EPSG:4326 EPSG:27700) performing vectortranslate operations: default CRS OSM extracts obtained Geofabrik several providers EPSG:4326, .e. latitude longitude coordinates expressed via WGS84 ellipsoid, code EPSG:27700 indicates British National Grid. Hence, parameter -t_srs can used transform geographical data projected coordinates, may essential statistical software like spatstat. operation can also performed R sf package (e.g. ?st_transform()), conversion can slow large spatial objects. Please note default options (.e. c(\"-f\", \"GPKG\", \"-overwrite\", \"-oo\", \"CONFIG_FILE=\", paste0(\"CONFIG_FILE=\", osmconf_ini), \"-lco\", \"GEOMETRY_NAME=geometry\", layer)) internally appended vectortranslate_options argument. next example illustrates apply SQL-like query vectortranslate process. precisely, can use arguments -select -create SQL-like query run vectortranslate process. Check details OGR SQL dialect. First , need build character vector options passed ogr2ogr: can process file: procedure can repeated using ad-hoc osmconf.ini file. arguments fundamental need work small portion bigger .pbf file. example, following code (run vignette) used extract primary, secondary tertiary roads .pbf file Portugal stored Geofabrik servers. downloading data, takes approximately 35 seconds run code using HP ENVY Notebook Intel i7-7500U processor 8GB RAM using Windows 10: classical approach (also run vignette) slower provides identical results: Starting version 0.3.0, arguments boundary boundary_type can used perform spatial filter operations vectortranslate process. particular, spatial boundary can created using sf sfc object (POLYGON MULTIPOLYGON geometry) via argument boundary: output, bounding box highlighted black, intersecting streets red roads grey.  Finally, argument boundary_type can used select among different types spatial filters. moment support two types filters: \"spat\" (default value) \"clipsrc\". former option implies spatial filter selects features intersect given area (shown ), latter option implies features also cropped. cases, polygonal boundary must specified sf sfc object. following example shows download Geofabrik servers .pbf extract associated Malta apply spatial filter performing vectortranslate operations. select clip road segments intersect 5 kilometres circular buffer centred La Valletta, capital. options -t_srs, -select -interpretation . spatial filter may return invalid LINESTRING geometries (due cropping operation). reason, -nlt PROMOTE_TO_MULTI options used override default geometry type promote LINESTRING(s) MULTILINESTRING(s). can use st_cast() convert MULTILINESTRING LINESTRING (may important packages functions). following map represent result, highlight bounding circle road segments within using dark-red colour, road segments coloured grey.  process takes approximately 1 2 seconds, equivalent R code, reported , slower: time difference gets relevant larger OSM extracts. Moreover, R code crops road segments using rectangular boundary instead proper circular polygon:","code":"# Check the CRS oe_get(\"ITS Leeds\", vectortranslate_options = c(\"-t_srs\", \"EPSG:27700\"), quiet = FALSE) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 428911.1 ymin: 434356.9 xmax: 429858.1 ymax: 435067 #> Projected CRS: OSGB36 / British National Grid my_vectortranslate = c(   \"-t_srs\", \"EPSG:27700\",    # SQL-like query where we select only the following fields   \"-select\", \"osm_id, highway\",    # SQL-like query where we filter only the features where highway is equal to footway or cycleway   \"-where\", \"highway IN ('footway', 'cycleway')\" ) its_leeds = oe_get(\"ITS Leeds\", vectortranslate_options = my_vectortranslate, quiet = FALSE) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 76 features and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 428932.4 ymin: 434479.2 xmax: 429673.2 ymax: 435059.5 #> Projected CRS: OSGB36 / British National Grid # 1. Download the data and skip gpkg conversion oe_get(\"Portugal\", download_only = TRUE, skip_vectortranslate = TRUE)  # 2. Define the vectortranslate options my_vectortranslate = c(   # SQL-like query where we select only the features where highway in (primary, secondary, tertiary)   \"-select\", \"osm_id, highway\",   \"-where\", \"highway IN ('primary', 'secondary', 'tertiary')\" )  # 3. Convert and read-in system.time({   portugal1 = oe_get(\"Portugal\", vectortranslate_options = my_vectortranslate) }) #  user  system elapsed  # 17.39    9.93   25.53 system.time({   portugal2 = oe_get(\"Portugal\", quiet = FALSE, force_vectortranslate = TRUE)   portugal2 = portugal2 %>%      dplyr::select(osm_id, highway) %>%      dplyr::filter(highway %in% c('primary', 'secondary', 'tertiary')) }) #   user  system elapsed  # 131.05   28.70  177.03  nrow(portugal1) == nrow(portugal2) #> TRUE its_bbox = st_bbox(c(xmin = -1.559184 , ymin = 53.807739 , xmax = -1.557375 , ymax = 53.808094), crs = 4326) %>%    st_as_sfc()  its_small = oe_get (\"ITS Leeds\", boundary = its_bbox) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 5 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.559731 ymin: 53.80676 xmax: -1.556762 ymax: 53.80945 #> Geodetic CRS:  WGS 84 # 1. Define the polygonal boundary la_valletta = st_sfc(st_point(c(456113.1, 3972853)), crs = 32633) %>%   st_buffer(5000)  # 2. Define the vectortranslate options my_vectortranslate = c(   \"-t_srs\", \"EPSG:32633\",   \"-select\", \"highway\",   \"-where\", \"highway IN ('primary', 'secondary', 'tertiary', 'unclassified')\",   \"-nlt\", \"PROMOTE_TO_MULTI\" )  # 3. Download data oe_get(\"Malta\", skip_vectortranslate = TRUE, download_only = TRUE)  # 4. Read-in data system.time({   oe_get(\"Malta\", vectortranslate_options = my_vectortranslate, boundary = la_valletta, boundary_type = \"clipsrc\") }) # The input place was matched with: Malta # The chosen file was already detected in the download directory. Skip downloading. # Start with the vectortranslate operations on the input file! # 0...10...20...30...40...50...60...70...80...90...100 - done. # Finished the vectortranslate operations on the input file! # Reading layer `lines' from data source `C:\\Users\\Utente\\AppData\\Local\\Temp\\RtmpYVijx8\\geofabrik_malta-latest.gpkg' using driver `GPKG' # Simple feature collection with 1205 features and 1 field # Geometry type: MULTILINESTRING # Dimension:     XY # Bounding box:  xmin: 451113.7 ymin: 3967858 xmax: 460364.8 ymax: 3976642 # Projected CRS: WGS 84 / UTM zone 33N #    user  system elapsed  #    0.55    0.11    0.61 system.time({   malta_crop = oe_get(\"Malta\", force_vectortranslate = TRUE) %>%      dplyr::filter(highway %in% c('primary', 'secondary', 'tertiary', 'unclassified')) %>%      st_transform(32633) %>%      st_crop(la_valletta) }) #> user  system elapsed  #> 4.61    1.67    7.69"},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"query-and-wkt_filter-arguments","dir":"Articles","previous_headings":"Main package functions > oe_get(): Do it all in one step","what":"query and wkt_filter arguments","title":"Introducing osmextract","text":"last two options introduce query wkt_filter. defined R package sf represent useful compromise GDAL R approaches explained , especially user needs apply different queries (typically small medium-size) OSM extract. fact, two parameters create regular queries spatial filters, respectively, applied immediately reading-.gpkg file. following code, example, mimics operations illustrated , reading-road segments intersect circular buffer defined around La Valletta: output can see applies circular spatial filter doesn’t crop features:  approach pros cons. First , slightly slower GDAL routines, mainly several unnecessary features converted .gpkg format. Hence, may become unfeasible larger .pbf files, probably starting 300/500MB. test cases add benchmarks near future. side, require new time-consuming ogr2ogr conversion every time user defines new query. reasons, suggested approach querying small OSM extract. Last least, can use function hstore_get_value extract one tags saved other_tags column without using ogr2ogr rerunning oe_vectortranslate() function::","code":"malta_small = oe_get(   \"Malta\",    query = \"   SELECT highway, geometry    FROM 'lines'    WHERE highway IN ('primary', 'secondary', 'tertiary', 'unclassified')\",    wkt_filter = st_as_text(st_transform(la_valletta, 4326)),   force_vectortranslate = TRUE ) # No extra tag colnames(oe_get(\"ITS Leeds\", quiet = TRUE)) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  \"barrier\"    \"man_made\"   #>  [8] \"z_order\"    \"other_tags\" \"geometry\"  # Check extra tags oe_get_keys(\"ITS Leeds\") #>  [1] \"surface\"             \"lanes\"               \"bicycle\"             \"lit\"                 #>  [5] \"access\"              \"oneway\"              \"maxspeed\"            \"ref\"                 #>  [9] \"foot\"                \"natural\"             \"lanes:backward\"      \"lanes:forward\"       #> [13] \"source:name\"         \"step_count\"          \"lanes:psv:backward\"  \"alt_name\"            #> [17] \"layer\"               \"motor_vehicle\"       \"tunnel\"              \"bridge\"              #> [21] \"covered\"             \"incline\"             \"lanes:psv\"           \"service\"             #> [25] \"turn:lanes\"          \"turn:lanes:forward\"  \"frequency\"           \"indoor\"              #> [29] \"lcn\"                 \"level\"               \"maxheight\"           \"operator\"            #> [33] \"power\"               \"source:geometry\"     \"substation\"          \"turn:lanes:backward\" #> [37] \"voltage\"             \"website\"  # Add extra tag colnames(oe_get(   \"ITS Leeds\",    provider = \"test\",    query = \"SELECT *, hstore_get_value(other_tags, 'bicycle') AS bicycle FROM lines\" )) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> The corresponding gpkg file was already detected. Skip vectortranslate operations. #> Reading query `SELECT *, hstore_get_value(other_tags, 'bicycle') AS bicycle FROM lines' #> from data source `/tmp/RtmpxXy8FR/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 10 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  \"barrier\"    \"man_made\"   #>  [8] \"z_order\"    \"other_tags\" \"bicycle\"    \"geometry\""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"other-providers","dir":"Articles","previous_headings":"","what":"Other providers","title":"Introducing osmextract","text":"package supports downloading, reading extracting OpenStreetMap data various providers. list providers can found wiki.openstreetmap.org. first provider supported Geofabrik. second bbbike. package can extended support additional providers, seen following commit adds working provider. information adding new providers package, see providers vignette.","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"more-on-openstreetmap","dir":"Articles","previous_headings":"","what":"More on OpenStreetMap","title":"Introducing osmextract","text":"world knowledge, convention wisdom contained OSM data hope package helps discover use knowledge public benefit. learn structure OSM data various tagging systems conventions, Elements page OSM wiki ideal place start. find much excellent content OSM wiki pages.","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/osmextract.html","id":"contributing-to-osm","dir":"Articles","previous_headings":"","what":"Contributing to OSM","title":"Introducing osmextract","text":"final thing say introductory vignette citizen-led project like Wikipedia, OSM relies participatory culture, people consume contribute data, survive. note, urge anyone reading least sign-get OSM account osm.org. highly recommend contributing world’s geographic commons. step user contributor OSM data small one can highly rewarding. find issues OSM data, people OpenStreetMap happy correct data. logged-, can contribute using editors excellent ID editor, can get zooming anywhere want www.openstreetmap.org clicking “Edit”. learn contributing amazing OSM community, recommend checking OSM Beginners Guide.","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/providers.html","id":"adding-a-provider_zones-object-to-the-package","dir":"Articles","previous_headings":"","what":"Adding a provider_zones object to the package","title":"Add new OpenStreetMap providers","text":"first hardest step create sf object analogous test_zones object shown : output shows three important column names: zone name (used matching input place, see oe_match()); URL endpoint .pbf files associated zone can downloaded; geometry, representing spatial extent dataset. object must also include fields level id, used, respectively, spatial matching updating. See oe_match() oe_update(). best way start creating new _zones object new provider probably looking code wrote first supported provider data-raw/geofabrik_zones.R. following commands clone repo open relevant file: RStudio: Create new script document code generates new object, e.g. bbbike: created new provider _zones file, ’s time add provider package.","code":"names(test_zones) #> [1] \"id\"            \"name\"          \"parent\"        \"level\"         #> [5] \"pbf_file_size\" \"pbf\"           \"geometry\" str(test_zones[, c(2, 6, 7)]) #> Classes 'sf' and 'data.frame':   2 obs. of  3 variables: #>  $ name    : chr  \"Isle of Wight\" \"ITS Leeds\" #>  $ pbf     : chr  \"https://github.com/ropensci/osmextract/releases/download/0.0.1/geofabrik_isle-of-wight-latest.osm.pbf\" \"https://github.com/ropensci/osmextract/raw/master/inst/its-example.osm.pbf\" #>  $ geometry:sfc_POLYGON of length 2; first list element: List of 1 #>   ..$ : num [1:7, 1:2] -1.52 -1.66 -1.31 -1.11 -1.03 ... #>   ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\" #>  - attr(*, \"sf_column\")= chr \"geometry\" #>  - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA #>   ..- attr(*, \"names\")= chr [1:2] \"name\" \"pbf\" git clone git@github.com:ropensci/osmextract rstudio osmextract/osmextract.Rproj file.edit(\"data-raw/geofabrik_zones.R\") file.edit(\"data-raw/bbbike_zones.R\") # or, even better, use usethis::use_data_raw(\"bbbike_zones\")"},{"path":"https://docs.ropensci.org/osmextract/articles/providers.html","id":"adding-the-new-provider-to-the-package","dir":"Articles","previous_headings":"","what":"Adding the new provider to the package","title":"Add new OpenStreetMap providers","text":"created overview _zones file outlined previous step, need modify following files provider available others: data.R, ’ll need document new dataset; globals.R, ’ll need add new object name; providers.R, ’ll need add new object name oe_available_providers() load_provider_data().","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/providers.html","id":"documenting-the-provider","dir":"Articles","previous_headings":"","what":"Documenting the provider","title":"Add new OpenStreetMap providers","text":"final step also fun: documenting using provider. Add example, mention README tell others new provider can ! want ask help adding new provider, feel free open new issue github repository!","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/providers.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Add new OpenStreetMap providers","text":"vignette talks main steps needed extend osmextract adding new OSM data providers. see information code form, see PR implemented openstreetmap_fr provider : https://github.com/ropensci/osmextract/commit/dbf131667a80e5a6837a6c8eb3b967075e1aba16","code":""},{"path":"https://docs.ropensci.org/osmextract/articles/providers_comparisons.html","id":"geofabrik","dir":"Articles","previous_headings":"","what":"Geofabrik","title":"Comparing the supported OSM providers","text":"geofabrik society provides map-based services free downloads OSM extracts updated daily. extracts based division world different regions, covering whole continent (plus Russian Federation):  several countries around world:  Geofabrik also defines several special zones, Alps, Britain Ireland, Germany, Austria Switzerland, US Midwest, US Northeast, US Pacific, US South US West. Moreover, contains extracts relative administrative subregions, mainly Europe, Russia, Canada South America:  Check ?geofabrik_zones provider’s webpage details.","code":"par(mar = rep(0, 4)) plot(geofabrik_zones[geofabrik_zones$level == 1, \"name\"], key.pos = NULL, main = NULL) plot(geofabrik_zones[geofabrik_zones$level == 2, \"name\"], key.pos = NULL, main = NULL) plot(geofabrik_zones[geofabrik_zones$level == 3, \"name\"], key.pos = NULL, main = NULL)"},{"path":"https://docs.ropensci.org/osmextract/articles/providers_comparisons.html","id":"openstreetmap-fr","dir":"Articles","previous_headings":"","what":"Openstreetmap.fr","title":"Comparing the supported OSM providers","text":"openstreetmap_fr extracts taken http://download.openstreetmap.fr/, web-service provides OSM data updated every minutes. extracts based several regions, continents:  countries around world (less geofabrik):  can noticed several holes (Peru, reason , first example, Lima matched South America data), implying openstreetmap_fr always used geographical matching place. Nevertheless, provides extremely detailed extracts regions world, like China,  India,  France,  Brazil","code":"# Russian federation is considered as a level 1 zone plot(openstreetmap_fr_zones[openstreetmap_fr_zones$level == 1, \"name\"], key.pos = NULL, main = NULL) plot(openstreetmap_fr_zones[openstreetmap_fr_zones$level == 2, \"name\"], key.pos = NULL, main = NULL) plot(openstreetmap_fr_zones[openstreetmap_fr_zones$parent == \"china\", \"name\"], key.pos = NULL, main = NULL) plot(openstreetmap_fr_zones[openstreetmap_fr_zones$parent == \"india\", \"name\"], key.pos = NULL, main = NULL) ids_2 = openstreetmap_fr_zones$parent %in% \"france\" ids_3 = openstreetmap_fr_zones$parent %in% openstreetmap_fr_zones$id[ids_2]  plot(openstreetmap_fr_zones[ids_2 | ids_3, \"name\"], key.pos = NULL, main = NULL) ids_2 = openstreetmap_fr_zones$parent %in% \"brazil\" ids_3 = openstreetmap_fr_zones$parent %in% openstreetmap_fr_zones$id[ids_2]  plot(openstreetmap_fr_zones[ids_2 | ids_3, \"name\"], key.pos = NULL, main = NULL)"},{"path":"https://docs.ropensci.org/osmextract/articles/providers_comparisons.html","id":"bbbike","dir":"Articles","previous_headings":"","what":"BBBike","title":"Comparing the supported OSM providers","text":"bbbike provider based https://download.bbbike.org/osm/bbbike/. quite different provider supported osmextract since contains OSM data 200 cities worldwide.  bbbike provider safest choice looking OSM data relative particular city world.","code":"par(mar = rep(0, 4)) plot(sf::st_geometry(spData::world)) plot(sf::st_geometry(bbbike_zones), border = \"darkred\", add = TRUE, lwd = 3)"},{"path":"https://docs.ropensci.org/osmextract/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrea Gilardi. Author, maintainer. Robin Lovelace. Author. Barry Rowlingson. Contributor. Salva Fernández. Reviewer.            Salva reviewed package (v. 0.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/395> Nicholas Potter. Reviewer.            Nicholas reviewed package (v. 0.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/395>","code":""},{"path":"https://docs.ropensci.org/osmextract/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gilardi , Lovelace R (2024). osmextract: Download Import Open Street Map Data Extracts. R package version 0.5.0.9000, https://github.com/ropensci/osmextract, https://docs.ropensci.org/osmextract/.","code":"@Manual{,   title = {osmextract: Download and Import Open Street Map Data Extracts},   author = {Andrea Gilardi and Robin Lovelace},   year = {2024},   note = {R package version 0.5.0.9000, https://github.com/ropensci/osmextract},   url = {https://docs.ropensci.org/osmextract/}, }"},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"osmextract-","dir":"","previous_headings":"","what":"Download and Import Open Street Map Data Extracts","title":"Download and Import Open Street Map Data Extracts","text":"goal osmextract make easier people access OpenStreetMap (OSM) data reproducible research. OSM data premier source freely available, community created geographic data worldwide. aim enable extract data-driven work public interest. osmextract matches, downloads, converts imports bulk OSM data hosted providers Geofabrik GmbH bbbike. information alternative providers add see providers vignette.","code":""},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"why-osmextract","dir":"","previous_headings":"","what":"Why osmextract?","title":"Download and Import Open Street Map Data Extracts","text":"package answers common question researchers use OSM data: get statistical environment, appropriate format, part computationally efficient reproducible workflow? packages answer parts question. osmdata, example, R package provides R interface Overpass API, ideal downloading small OSM datasets. However, API rate limited, making hard download large datasets. case study, try download cycleways England using osmdata: query stops error message around 30 seconds. query can made osmextract follows, reads-almost 100k linestrings less 10 seconds, data downloaded compressed .pbf format converted open standard .gpkg format. download--conversion operation OSM extract associated England takes approximately minutes, operation must executed . following code chunk evaluated.  package designed complement osmdata, advantages osmextract small datasets: osmdata likely quicker datasets less MB size, provides --date data intuitive interface. osmdata can provide data range formats, osmextract returns sf objects. osmextract’s niche provides fast way download large OSM datasets highly compressed pbf format read via fast C library GDAL popular R package working geographic data sf.","code":"library(osmdata) cycleways_england = opq(\"England\") %>%    add_osm_feature(key = \"highway\", value = \"cycleway\") %>%    osmdata_sf() # Error in check_for_error(doc) : General overpass server error; returned: # The data included in this document is from www.openstreetmap.org. The data is made available under ODbL. runtime error: Query timed out in \"query\" at line 4 after 26 seconds. library(osmextract)  cycleways_england = oe_get(   \"England\",   quiet = FALSE,   query = \"SELECT * FROM 'lines' WHERE highway = 'cycleway'\" ) par(mar = rep(0.1, 4)) plot(sf::st_geometry(cycleways_england))"},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Download and Import Open Street Map Data Extracts","text":"can install released version osmextract CRAN : can install development version GitHub : Load package : use alongside functionality sf package, also recommend attaching geographic data package follows:","code":"install.packages(\"osmextract\") # install.packages(\"remotes\") remotes::install_github(\"ropensci/osmextract\") library(osmextract) #> Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright. #> Check the package website, https://docs.ropensci.org/osmextract/, for more details. library(sf) #> Linking to GEOS 3.11.2, GDAL 3.6.2, PROJ 9.2.0; sf_use_s2() is TRUE"},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"warnings","dir":"","previous_headings":"Installation","what":"Warnings:","title":"Download and Import Open Street Map Data Extracts","text":"functions defined package may return warning message like user running old version GDAL (<= 3.0.0) PROJ (<= 6.0.0). See details. Nevertheless, every function still work correctly. Please, raise new issue find odd behaviour.","code":"st_crs<- : replacing crs does not reproject data; use st_transform for that"},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Download and Import Open Street Map Data Extracts","text":"Give osmextract place name try find list names specified provider (Geofabrik default). name give matches place, download import associated data R. function oe_get() downloads (already downloaded) reads-data OSM providers sf objects. default oe_get() imports lines layer, layer can read-changing layer argument:  figures give insight volume richness data contained OSM extracts. Even small island Isle Wight, contains 50k features including ferry routes, shops roads. column names osm_lines object follows: imported, can use functions data frames base R packages. can also use functions sf package spatial analysis visualisation. Let’s plot major, secondary residential roads, example:  steps can used get OSM datasets (examples run): input place match existing names supported providers, oe_get() try geocode via Nominatim API, select smallest OSM extract intersecting area. example (run): details using package, see Introducing osmextract vignette.","code":"osm_lines = oe_get(\"Isle of Wight\", stringsAsFactors = FALSE, quiet = TRUE) osm_points = oe_get(\"Isle of Wight\", layer = \"points\", stringsAsFactors = FALSE, quiet = TRUE) nrow(osm_lines) #> [1] 51226 nrow(osm_points) #> [1] 67783 par(mar = rep(0, 4)) plot(st_geometry(osm_lines), xlim = c(-1.59, -1.1), ylim = c(50.5, 50.8)) plot(st_geometry(osm_points), xlim = c(-1.59, -1.1), ylim = c(50.5, 50.8)) names(osm_lines) # default variable names #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"z_order\"    \"other_tags\" \"geometry\" ht = c(\"primary\", \"secondary\", \"tertiary\", \"unclassified\") # highway types of interest osm_major_roads = osm_lines[osm_lines$highway %in% ht, ] plot(osm_major_roads[\"highway\"], key.pos = 1) malta = oe_get(\"Malta\", quiet = TRUE) andorra = oe_get(\"Andorra\", extra_tags = \"ref\") leeds = oe_get(\"Leeds\") goa = oe_get(\"Goa\", query = \"SELECT highway, geometry FROM 'lines'\") oe_get(\"Milan\") # Warning: It will download more than 400MB of data #> No exact match found for place = Milan and provider = geofabrik. Best match is Iran. #> Checking the other providers. #> No exact match found in any OSM provider data. Searching for the location online. #> ... (extra messages here)"},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"persistent-download-directory","dir":"","previous_headings":"","what":"Persistent download directory","title":"Download and Import Open Street Map Data Extracts","text":"default behaviour oe_get() save files temporary directory, erased every time restart R session. want set directory persist, can add OSMEXT_DOWNLOAD_DIRECTORY=/path//osm/data .Renviron file, e.g. : strongly advise setting persistent directory since working .pbf files expensive operation, skipped oe_*() functions detect input .pbf file already downloaded. can always check default download_directory used oe_get() :","code":"usethis::edit_r_environ() # Add a line containing: OSMEXT_DOWNLOAD_DIRECTORY=/path/to/save/files oe_download_directory()"},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"next-steps","dir":"","previous_headings":"","what":"Next steps","title":"Download and Import Open Street Map Data Extracts","text":"love see providers added (see Add new OpenStreetMap providers details) see people can OSM datasets type provided package reproducible open statistical programming environment greater good. contributions support improvements package welcome via issue tracker.","code":""},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Download and Import Open Street Map Data Extracts","text":"hope package provide easy access OSM data reproducible research public interest, adhering condition OdBL licence states Derivative Database Publicly Use must terms : License; later version License similar spirit See Introducing osmextract vignette details.","code":""},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"other-approaches","dir":"","previous_headings":"","what":"Other approaches","title":"Download and Import Open Street Map Data Extracts","text":"osmdata R package importing small datasets directly OSM servers geofabrik R package download OSM data Geofabrik pyrosm Python package reading .pbf files pydriosm Python package download, read import OSM extracts osmium provides python bindings Libosmium C++ library OpenStreetMapX.jl Julia package reading analysing .osm files PostGIS established spatial database works well large OSM datasets others? Let us know!","code":""},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Download and Import Open Street Map Data Extracts","text":"much look forward comments, questions contributions. question want suggest new approach, feel free create new discussion github repository. found bug, want add new OSM extracts provider, create new issue issue tracker new pull request. always try build intuitive user interface write informative error messages, think something clear explained better, please let us know.","code":""},{"path":"https://docs.ropensci.org/osmextract/index.html","id":"contributor-code-of-conduct","dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Download and Import Open Street Map Data Extracts","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/bbbike_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"An sf object of geographical zones taken from bbbike.org — bbbike_zones","title":"An sf object of geographical zones taken from bbbike.org — bbbike_zones","text":"Start bicycle routing ... everywhere!","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/bbbike_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An sf object of geographical zones taken from bbbike.org — bbbike_zones","text":"","code":"bbbike_zones"},{"path":"https://docs.ropensci.org/osmextract/reference/bbbike_zones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An sf object of geographical zones taken from bbbike.org — bbbike_zones","text":"sf object 236 rows 6 columns: name , usually English, long-form name city. pbf Link latest .osm.pbf file region. pbf_file_size Size pbf file bytes. id unique identifier. contains letters, numbers potentially characters \"-\" \"/\". level integer code always equal 3 (since bbbike data represent non-hierarchical geographical zones). used matching operations case spatial input. oe_* functions select geographical area closest input place highest \"level\". See geofabrik_zones example (proper) hierarchical structure. geometry sfg geographical region, rectangular. See also oe_get_boundary() extract proper geographical boundaries.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/bbbike_zones.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An sf object of geographical zones taken from bbbike.org — bbbike_zones","text":"https://download.bbbike.org/osm/","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/bbbike_zones.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An sf object of geographical zones taken from bbbike.org — bbbike_zones","text":"sf object containing URLs, names, file_size OSM extracts stored https://download.bbbike.org/osm/bbbike/.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/geofabrik_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"An sf object of geographical zones taken from geofabrik.de — geofabrik_zones","title":"An sf object of geographical zones taken from geofabrik.de — geofabrik_zones","text":"sf object containing URLs, names file-sizes OSM extracts stored https://download.geofabrik.de/. can read details data following link: https://download.geofabrik.de/technical.html.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/geofabrik_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An sf object of geographical zones taken from geofabrik.de — geofabrik_zones","text":"","code":"geofabrik_zones"},{"path":"https://docs.ropensci.org/osmextract/reference/geofabrik_zones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An sf object of geographical zones taken from geofabrik.de — geofabrik_zones","text":"sf object 475 rows 9 columns: id unique identifier. contains letters, numbers potentially characters \"-\" \"/\". name , usually English, long-form name area. parent identifier next larger excerpts contains one, present. level integer code 1 4. level = 1, zone corresponds one continents (Africa, Antarctica, Asia, Australia Oceania, Central America, Europe, North America, South America) Russian Federation. level = 2, zone corresponds continent's subregions (.e. countries Italy, Great Britain, Spain, USA, Mexico, Belize, Morocco, Peru ). also exceptions correspond Special Sub Regions (according Geofabrik definition), : South Africa (includes Lesotho), Alps, Britain Ireland, Germany + Austria + Switzerland, US Midwest, US Northeast, US Pacific, US South, US West, US states. Level = 3L corresponds subregions state (level 2 zone). example, West Yorkshire, subregion England, level 3 zone. Finally, level = 4 correspond subregions third level mainly related small areas Germany. field used matching operations case spatial input. iso3166-1_alpha2 character vector two-letter ISO3166-1 codes. set smallest extract still fully (mostly) contains entity code; e.g. code \"DE\" given Germany extract Europe even though Europe contains Germany. extract covers several countries per-country extracts available (e.g. Israel Palestine), several ISO codes given (\"PS IL\" \"Palestine Israel\"). iso3166_2 character vector usually five-character ISO3166-2 codes. rules apply. entities iso3166-1 iso3166-2 code. example, iso3166_2 code US State \"US - \" plus code state. pbf Link latest .osm.pbf file region. pbf_file_size Size .pbf file bytes. geometry sfg geographical region. country boundaries, buffer around countries. Check oe_get_boundary() extract geographical boundaries.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/geofabrik_zones.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An sf object of geographical zones taken from geofabrik.de — geofabrik_zones","text":"https://download.geofabrik.de/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/oe_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean download directory — oe_clean","title":"Clean download directory — oe_clean","text":"functions wrapper around unlink() can used delete .osm.pbf .gpkg files given directory.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean download directory — oe_clean","text":"","code":"oe_clean(download_directory = oe_download_directory(), force = FALSE)"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean download directory — oe_clean","text":"download_directory directory .osm.pbf .gpkg files saved. Default value oe_download_directory(). force Internal option. can used skip checks run beginning function force removal pbf/gpkg files.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean download directory — oe_clean","text":"unlink().","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean download directory — oe_clean","text":"","code":"# Warning: the following removes all files in oe_download_directory() if (FALSE) { oe_clean()}"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a file given a url — oe_download","title":"Download a file given a url — oe_download","text":"function used download file given URL. focuses OSM extracts .osm.pbf format stored one providers implemented package. URL specified parameter file_url.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a file given a url — oe_download","text":"","code":"oe_download(   file_url,   provider = NULL,   file_basename = basename(file_url),   download_directory = oe_download_directory(),   file_size = NA,   force_download = FALSE,   max_file_size = 5e+08,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a file given a url — oe_download","text":"file_url URL pointing .osm.pbf file downloaded. provider provider stores file? NULL (default), may inferred URL, must specified non-standard cases. See details examples. file_basename basename file. default behaviour auto-generate URL using basename(). download_directory download file containing OSM data? default equal oe_download_directory(), equal tempdir() changes time restart R. can set persistent download_directory adding following .Renviron file (e.g. edit_r_environ function usethis package): OSMEXT_DOWNLOAD_DIRECTORY=/path//osm/data. file_size big file? Optional. NA default. bigger max_file_size function run interactive mode, interactive menu displayed, asking permission downloading file. force_download .osm.pbf file updated already downloaded? FALSE default. parameter used update old .osm.pbf files. max_file_size maximum file size download without asking interactive mode. Default: 5e+8, half gigabyte. quiet Boolean. FALSE, function prints informative messages. Starting sf version 0.9.6, quiet equal FALSE, vectortranslate operations display progress bar.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a file given a url — oe_download","text":"character string representing file's path.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download a file given a url — oe_download","text":"function runs several checks actually downloading new file avoid overloading OSM providers. first step definition file's path associated input file_url. path created pasting together download_directory, name chosen provider (may inferred URL) basename() URL. example, file_url equal \"https://download.geofabrik.de/europe/italy-latest.osm.pbf\", download_directory = \"/tmp\", path built \"/tmp/geofabrik_italy-latest.osm.pbf\". Thereafter, function checks existence file , founds , returns path. parameter force_download used modify behaviour. file associated new path, function downloads new file using download.file() mode = \"wb\", , , returns path.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a file given a url — oe_download","text":"","code":"(its_match = oe_match(\"ITS Leeds\", quiet = TRUE)) #> $url #> [1] \"https://github.com/ropensci/osmextract/raw/master/inst/its-example.osm.pbf\" #>  #> $file_size #> [1] 40792 #>   if (FALSE) { oe_download(   file_url = its_match$url,   file_size = its_match$file_size,   provider = \"test\",   download_directory = tempdir() ) iow_url = oe_match(\"Isle of Wight\") oe_download(   file_url = iow_url$url,   file_size = iow_url$file_size,   download_directory = tempdir() ) Sucre_url = oe_match(\"Sucre\", provider = \"bbbike\") oe_download(   file_url = Sucre_url$url,   file_size = Sucre_url$file_size,   download_directory = tempdir() )}"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the download directory used by the package — oe_download_directory","title":"Return the download directory used by the package — oe_download_directory","text":"default, download directory equal tempdir(). can set persistent download directory adding following command .Renviron file (e.g. edit_r_environ function usethis package): OSMEXT_DOWNLOAD_DIRECTORY=/path//osm/data.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the download directory used by the package — oe_download_directory","text":"","code":"oe_download_directory()"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the download directory used by the package — oe_download_directory","text":"character vector representing path download directory used package.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_download_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the download directory used by the package — oe_download_directory","text":"","code":"oe_download_directory() #> [1] \"/tmp/RtmpM8EDhc\""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_find.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path of .pbf and .gpkg files associated with an input OSM extract — oe_find","title":"Get the path of .pbf and .gpkg files associated with an input OSM extract — oe_find","text":"function takes place name returns path .pbf/.gpkg files associated .","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path of .pbf and .gpkg files associated with an input OSM extract — oe_find","text":"","code":"oe_find(   place,   provider = \"geofabrik\",   download_directory = oe_download_directory(),   download_if_missing = FALSE,   return_pbf = TRUE,   return_gpkg = TRUE,   quiet = FALSE,   ... )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path of .pbf and .gpkg files associated with an input OSM extract — oe_find","text":"place Description geographical area matched .osm.pbf file. Can either length-1 character vector, sf/sfc/bbox object, numeric vector coordinates length 2. last case, assumed EPSG code 4326 specified c(LON, LAT), can use CRS sf/sfc/bbox objects. See Details Examples oe_match(). provider provider used download data? Available providers can found following command: oe_providers(). oe_get() oe_match(), place equal Leeds, provider set equal test. just simple examples internal tests. download_directory Directory files downloaded osmextract stored. default equal oe_download_directory(). download_if_missing Attempt download file found? FALSE default. return_pbf Logical length 1. TRUE, function returns path pbf file matches input place. return_gpkg Logical length 1. TRUE, function returns path gpkg file matches input place. quiet Boolean. FALSE, function prints informative messages. Starting sf version 0.9.6, quiet equal FALSE, vectortranslate operations display progress bar. ... Extra arguments passed oe_match() oe_get(). Please note modify argument download_only.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_find.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path of .pbf and .gpkg files associated with an input OSM extract — oe_find","text":"character vector length one (two) representing path(s) .pbf/.gpkg files associated input place. files sorted alphabetical order implies formats present download_directory, .gpkg file returned first.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_find.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the path of .pbf and .gpkg files associated with an input OSM extract — oe_find","text":"matching existing files (saved directory specified download_directory parameter) input place performed using list.files(), setting pattern argument equal basename URL associated input place. example, specify place = \"Isle Wight\", input matched (via oe_match()) URL Isle Wight's .osm.pbf file, files selected using pattern equal basename URL. file download_directory can matched basename URL download_if_missing parameter equal TRUE, function tries download read new file chosen provider (geofabrik default provider). download_if_missing parameter equal FALSE (default value), function stops error. default, function returns path .pbf .gpkg files associated input place (). can exclude one two formats setting arguments return_pbf return_gpkg FALSE.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_find.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the path of .pbf and .gpkg files associated with an input OSM extract — oe_find","text":"","code":"# Copy the ITS file to tempdir() to make sure that the examples do not # require internet connection. You can skip the next 4 lines (and start # directly with oe_get_keys) when running the examples locally.  res = file.copy(   from = system.file(\"its-example.osm.pbf\", package = \"osmextract\"),   to = file.path(tempdir(), \"test_its-example.osm.pbf\"),   overwrite = TRUE ) res = oe_get(\"ITS Leeds\", quiet = TRUE, download_directory = tempdir()) oe_find(\"ITS Leeds\", provider = \"test\", download_directory = tempdir()) #> The input place was matched with: ITS Leeds #> [1] \"/tmp/RtmpM8EDhc/test_its-example.gpkg\"    #> [2] \"/tmp/RtmpM8EDhc/test_its-example.osm.pbf\" oe_find(   \"ITS Leeds\", provider = \"test\",   download_directory = tempdir(), return_gpkg = FALSE ) #> The input place was matched with: ITS Leeds #> [1] \"/tmp/RtmpM8EDhc/test_its-example.osm.pbf\"  if (FALSE) { oe_find(\"Isle of Wight\", download_directory = tempdir()) oe_find(\"Malta\", download_if_missing = TRUE, download_directory = tempdir()) oe_find(   \"Leeds\",   provider = \"bbbike\",   download_if_missing = TRUE,   download_directory = tempdir(),   return_pbf = FALSE )}  # Remove .pbf and .gpkg files in tempdir oe_clean(tempdir())"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Find, download, translate and read OSM extracts from several providers — oe_get","title":"Find, download, translate and read OSM extracts from several providers — oe_get","text":"function used find, download, translate read OSM extracts obtained several providers. wrapper around oe_match() oe_read(). Check introductory vignette, examples help pages wrapped functions understand details behind parameters.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find, download, translate and read OSM extracts from several providers — oe_get","text":"","code":"oe_get(   place,   layer = \"lines\",   ...,   provider = \"geofabrik\",   match_by = \"name\",   max_string_dist = 1,   level = NULL,   download_directory = oe_download_directory(),   force_download = FALSE,   max_file_size = 5e+08,   vectortranslate_options = NULL,   osmconf_ini = NULL,   extra_tags = NULL,   force_vectortranslate = FALSE,   boundary = NULL,   boundary_type = c(\"spat\", \"clipsrc\"),   download_only = FALSE,   skip_vectortranslate = FALSE,   never_skip_vectortranslate = FALSE,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find, download, translate and read OSM extracts from several providers — oe_get","text":"place Description geographical area matched .osm.pbf file. Can either length-1 character vector, sf/sfc/bbox object, numeric vector coordinates length 2. last case, assumed EPSG code 4326 specified c(LON, LAT), can use CRS sf/sfc/bbox objects. See Details Examples oe_match(). layer layer read ? Typically points, lines (default), multilinestrings, multipolygons other_relations. specify ad-hoc query using argument query (see introductory vignette examples), oe_get() oe_read() read layer specified query ignore layer. See also #122. ... (Named) arguments passed sf::st_read(), like query, wkt_filter stringsAsFactors.  Check introductory vignette understand create (SQL-like) queries. provider provider used download data? Available providers can found following command: oe_providers(). oe_get() oe_match(), place equal Leeds, provider set equal test. just simple examples internal tests. match_by column provider's database used matching input place .osm.pbf file? default \"name\". Check Details Examples oe_match() understand parameter works. Ignored place character vector since matching performed spatial operation. max_string_dist Numerical value greater equal 0. maximum distance fuzzy matching (.e. Approximate String Distance, see adist()) input place match_by column tolerate testing alternative providers looking geographical matching Nominatim API? parameter set equal 0 match_by equal iso3166_1_alpha2 iso3166_2. Check Details Examples oe_match() understand parameter important. Ignored place character vector since matching performed spatial operation. level integer representing desired hierarchical level case spatial matching. geofabrik provider, example, 1 corresponds continent-level datasets, 2 countries, 3 corresponds regions 4 subregions. Hence, approximately say smaller administrative units correspond bigger levels. NULL, default, oe_* functions select highest available level. See Details Examples oe_match(). download_directory download file containing OSM data? default equal oe_download_directory(), equal tempdir() changes time restart R. can set persistent download_directory adding following .Renviron file (e.g. edit_r_environ function usethis package): OSMEXT_DOWNLOAD_DIRECTORY=/path//osm/data. force_download .osm.pbf file updated already downloaded? FALSE default. parameter used update old .osm.pbf files. max_file_size maximum file size download without asking interactive mode. Default: 5e+8, half gigabyte. vectortranslate_options Options passed sf::gdal_utils() argument options. Set default. Check details introductory vignette help page oe_vectortranslate(). osmconf_ini configuration file. See documentation gdal.org. Check details introductory vignette help page oe_vectortranslate(). Set default. extra_tags additional columns, corresponding OSM tags, resulting dataset? NULL default. Check introductory vignette help pages oe_vectortranslate() oe_get_keys(). Ignored osmconf_ini NULL. force_vectortranslate Boolean. Force original .pbf file translated .gpkg file, even .gpkg name already exists? FALSE default. tags extra_tags match data previously translated .gpkg files translation occurs (see #173 details). Check introductory vignette help page oe_vectortranslate(). boundary sf/sfc/bbox object used create spatial filter vectortranslate operations. type filter can chosen using argument boundary_type. boundary_type character vector length 1 specifying type spatial filter. spat filter selects features intersect given area, clipsrc also clips geometries. Check examples also details. download_only Boolean. TRUE, function returns path matched file stored, instead reading . FALSE default. skip_vectortranslate Boolean. TRUE, function skips vectortranslate operations reads (simply returns path) .osm.pbf file. FALSE default. never_skip_vectortranslate Boolean. used case user passed .ini file vectortranslate options (since, case, difficult determine existing .gpkg file generated following options.) quiet Boolean. FALSE, function prints informative messages. Starting sf version 0.9.6, quiet equal FALSE, vectortranslate operations display progress bar.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find, download, translate and read OSM extracts from several providers — oe_get","text":"sf object.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find, download, translate and read OSM extracts from several providers — oe_get","text":"algorithm use importing OSM extract data R divided 4 steps: 1) match input place url .pbf file; 2) download .pbf file; 3) convert .gpkg format 4) read-.gpkg file. function oe_match() used perform first operation function oe_read() (wrapper around oe_download(), oe_vectortranslate() sf::st_read()) performs three operations.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find, download, translate and read OSM extracts from several providers — oe_get","text":"","code":"# Copy ITS file to tempdir so that the examples do not require internet # connection. You can skip the next 4 lines when running the examples # locally.  its_pbf = file.path(tempdir(), \"test_its-example.osm.pbf\") file.copy(   from = system.file(\"its-example.osm.pbf\", package = \"osmextract\"),   to = its_pbf,   overwrite = TRUE ) #> [1] TRUE  # Match, download (not really) and convert OSM extracts associated to a simple test. its = oe_get(\"ITS Leeds\", download_directory = tempdir()) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 class(its) #> [1] \"sf\"         \"data.frame\" unique(sf::st_geometry_type(its)) #> [1] LINESTRING #> 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE  # Get another layer from ITS Leeds extract its_points = oe_get(\"ITS Leeds\", layer = \"points\", download_directory = tempdir()) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Adding a new layer to the .gpkg file. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `points' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 186 features and 10 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.568766 ymin: 53.80569 xmax: -1.549451 ymax: 53.81136 #> Geodetic CRS:  WGS 84 unique(sf::st_geometry_type(its_points)) #> [1] POINT #> 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE  # Get the .osm.pbf and .gpkg files paths oe_get(   \"ITS Leeds\", download_only = TRUE, quiet = TRUE,   download_directory = tempdir() ) #> [1] \"/tmp/RtmpM8EDhc/test_its-example.gpkg\" oe_get(   \"ITS Leeds\", download_only = TRUE, skip_vectortranslate = TRUE,   quiet = TRUE, download_directory = tempdir() ) #> [1] \"/tmp/RtmpM8EDhc/test_its-example.osm.pbf\" # See also ?oe_find()  # Add additional tags its_with_oneway = oe_get(   \"ITS Leeds\", extra_tags = \"oneway\",   download_directory = tempdir() ) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 10 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 names(its_with_oneway) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"oneway\"     \"z_order\"    \"other_tags\" #> [11] \"geometry\"   table(its_with_oneway$oneway, useNA = \"ifany\") #>  #>  yes <NA>  #>   13  176   # Use the query argument to get only oneway streets: q = \"SELECT * FROM 'lines' WHERE oneway == 'yes'\" its_oneway = oe_get(\"ITS Leeds\", query = q, download_directory = tempdir()) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> The corresponding gpkg file was already detected. Skip vectortranslate operations. #> Reading query `SELECT * FROM 'lines' WHERE oneway == 'yes'' #> from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 13 features and 10 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.558828 ymin: 53.80595 xmax: -1.548899 ymax: 53.809 #> Geodetic CRS:  WGS 84 its_oneway[, c(1, 3, 9)] #> Simple feature collection with 13 features and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.558828 ymin: 53.80595 xmax: -1.548899 ymax: 53.809 #> Geodetic CRS:  WGS 84 #> First 10 features: #>       osm_id     highway z_order                       geometry #> 1    6277600     service       0 LINESTRING (-1.552587 53.80... #> 2    6277601 residential       3 LINESTRING (-1.551771 53.80... #> 3    6295680       trunk       8 LINESTRING (-1.552894 53.80... #> 4   31705836       trunk       8 LINESTRING (-1.552349 53.80... #> 5   31705838  trunk_link       8 LINESTRING (-1.552261 53.80... #> 6   38422788       trunk       8 LINESTRING (-1.552261 53.80... #> 7  147151516     service       0 LINESTRING (-1.557987 53.80... #> 8  151645336 residential       3 LINESTRING (-1.552181 53.80... #> 9  160502811     service       0 LINESTRING (-1.553221 53.80... #> 10 552695946  trunk_link       8 LINESTRING (-1.551952 53.80...  # Apply a spatial filter during the vectortranslate operations its_poly = sf::st_sfc(   sf::st_polygon(     list(rbind(       c(-1.55577, 53.80850),       c(-1.55787, 53.80926),       c(-1.56096, 53.80891),       c(-1.56096, 53.80736),       c(-1.55675, 53.80658),       c(-1.55495, 53.80749),       c(-1.55577, 53.80850)     ))   ),   crs = 4326 ) its_spat = oe_get(\"ITS Leeds\", boundary = its_poly, download_directory = tempdir()) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 77 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.552941 ymax: 53.81102 #> Geodetic CRS:  WGS 84 its_clipped = oe_get(   \"ITS Leeds\", boundary = its_poly, boundary_type = \"clipsrc\",   quiet = TRUE, download_directory = tempdir() )  plot(sf::st_geometry(its), reset = FALSE, col = \"lightgrey\") plot(sf::st_boundary(its_poly), col = \"black\", add = TRUE) plot(sf::st_boundary(sf::st_as_sfc(sf::st_bbox(its_poly))), col = \"black\", add = TRUE) plot(sf::st_geometry(its_spat), add = TRUE, col = \"darkred\") plot(sf::st_geometry(its_clipped), add = TRUE, col = \"orange\")   # More complex examples if (FALSE) { west_yorkshire = oe_get(\"West Yorkshire\") # If you run it again, the function will not download the file # or convert it again west_yorkshire = oe_get(\"West Yorkshire\") # Match with place name oe_get(\"Milan\") # Warning: the .pbf file is 400MB oe_get(\"Vatican City\") # Check all providers oe_get(\"Zurich\") # Use Nominatim API for geolocating places  # Match with coordinates (any EPSG) milan_duomo = sf::st_sfc(sf::st_point(c(1514924, 5034552)), crs = 3003) oe_get(milan_duomo, quiet = FALSE) # Warning: the .pbf file is 400MB # Match with numeric coordinates (EPSG = 4326) oe_match(c(9.1916, 45.4650), quiet = FALSE)  # Check also alternative providers baku = oe_get(place = \"Baku\")  # Other examples: oe_get(\"RU\", match_by = \"iso3166_1_alpha2\", quiet = FALSE) # The following example mimics read_sf oe_get(\"Andora\", stringsAsFactors = FALSE, quiet = TRUE, as_tibble = TRUE)}  # Remove .pbf and .gpkg files in tempdir oe_clean(tempdir())"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the administrative boundary for a given place — oe_get_boundary","title":"Get the administrative boundary for a given place — oe_get_boundary","text":"function can used obtain polygon/multipolygon objects representing administrative boundary. objects extracted multipolygons layer given OSM extract.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the administrative boundary for a given place — oe_get_boundary","text":"","code":"oe_get_boundary(place, name = place, exact = TRUE, ...)"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the administrative boundary for a given place — oe_get_boundary","text":"place Description geographical area matched .osm.pbf file. Can either length-1 character vector, sf/sfc/bbox object, numeric vector coordinates length 2. last case, assumed EPSG code 4326 specified c(LON, LAT), can use CRS sf/sfc/bbox objects. See Details Examples oe_match(). name character vector length 1 describes relevant area. default, equal place, parameter can tuned obtain granular results starting OSM extract. See examples. must always set place argument specified using numeric spatial objects. exact Boolean length 1. TRUE, function returns features field name exactly equal name. FALSE, performs (case-sensitive) pattern matching. ... arguments (e.g. quiet force_vectortranslate) passed oe_get().","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the administrative boundary for a given place — oe_get_boundary","text":"sf object","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_boundary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the administrative boundary for a given place — oe_get_boundary","text":"function may return empty result corresponding GPKG file already exists contains partial results. case, can try running function setting never_skip_vectortranslate = TRUE.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the administrative boundary for a given place — oe_get_boundary","text":"","code":"if (FALSE) { library(sf) my_cols = sf.colors(5, categorical = TRUE) gabon = oe_get_boundary(\"Gabon\", quiet = TRUE) # country libreville = oe_get_boundary(\"Gabon\", \"Libreville\", quiet = TRUE) # capital  opar = par(mar = rep(0, 4)) plot(st_geometry(st_boundary(gabon)), reset = FALSE, col = \"grey\") plot(st_geometry(libreville), add = TRUE, col = my_cols[1])  # Exact match komo = oe_get_boundary(\"Gabon\", \"Komo\", quiet = TRUE) # Pattern matching komo_pt = oe_get_boundary(\"Gabon\", \"Komo\", exact = FALSE, quiet = TRUE) plot(st_geometry(komo), add = TRUE, col = my_cols[2]) plot(st_geometry(komo_pt), add = TRUE, col = my_cols[3:5]) par(opar)  # Get all boundaries (oe_get_boundary(\"Gabon\", name = \"%\", exact = FALSE, quiet = TRUE)[, 1:2])  # If the basic approach doesn't work, i.e. oe_get_boundary(\"Leeds\")  # try to consider larger regions, i.e. oe_get_boundary(\"West Yorkshire\", \"Leeds\") }"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Return keys and (optionally) values stored in ","title":"Return keys and (optionally) values stored in ","text":"function returns OSM keys (optionally) values stored other_tags field. See Details. cases, keys sorted according number occurrences, means common keys stored first.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return keys and (optionally) values stored in ","text":"","code":"oe_get_keys(   zone,   layer = \"lines\",   values = FALSE,   which_keys = NULL,   download_directory = oe_download_directory() )  # S3 method for default oe_get_keys(   zone,   layer = \"lines\",   values = FALSE,   which_keys = NULL,   download_directory = oe_download_directory() )  # S3 method for character oe_get_keys(   zone,   layer = \"lines\",   values = FALSE,   which_keys = NULL,   download_directory = oe_download_directory() )  # S3 method for sf oe_get_keys(   zone,   layer = \"lines\",   values = FALSE,   which_keys = NULL,   download_directory = oe_download_directory() )  # S3 method for oe_key_values_list print(x, n = getOption(\"oe_max_print_keys\", 10L), ...)"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return keys and (optionally) values stored in ","text":"zone sf object other_tags field character vector (length 1) can linked pointing .osm.pbf .gpkg file other_tags field. Character vectors linked .osm.pbf files using oe_find(). layer layer read ? Typically points, lines (default), multilinestrings, multipolygons other_relations. specify ad-hoc query using argument query (see introductory vignette examples), oe_get() oe_read() read layer specified query ignore layer. See also #122. values Logical. TRUE, function returns keys corresponding values, otherwise keys. Defaults FALSE. which_keys Character vector used subset keys corresponding values. Ignored values FALSE. See examples. download_directory Path directory stores .osm.pbf files. relevant zone character vector must matched file via oe_find(). Ignored unless zone character vector. x object class oe_key_values_list n Maximum number keys (corresponding values) print; can set globally options(oe_max_print_keys=...). Default value 10. ... Ignored.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return keys and (optionally) values stored in ","text":"argument values FALSE (default), function returns character vector names keys stored other_tags field. values TRUE, function returns named list stores keys corresponding values. latter case, returned object class oe_key_values_list defined ad-hoc printing method. See Details.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_keys.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return keys and (optionally) values stored in ","text":"OSM data typically documented using several tags, .e. pairs two items, namely key value. conversion .osm.pbf .gpkg formats governed CONFIG file lists tags must explicitly added .gpkg file. keys automatically stored using other_tags field syntax compatible PostgreSQL HSTORE type. See details. argument values TRUE, function returns named list class oe_key_values_list , key, summarises corresponding values. key-value pairs stored using following format: list(key1 = c(\"value1\", \"value1\", \"value2\", ...), key2 = c(\"value1\", ...) ...). decided implement ad-hoc method printing objects class oe_key_values_list using following structure: n1 denotes number times value1 repeated, n2 denotes number times value2 repeated . Also values listed according number occurrences decreasing order. default, function prints ten common keys, number can adjusted using option oe_max_print_keys. Finally, hstore_get_value() function can used inside query argument oe_get() extract one particular tag existing file. Check introductory vignette see examples.","code":"key1 = {#value1 = n1; #value2 = n2; #value3 = n3,   ...} key2 = {#value1 = n1; #value2 = n2; ...} key3 = {#value1 = n1} ..."},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return keys and (optionally) values stored in ","text":"","code":"# Copy the ITS file to tempdir() to make sure that the examples do not # require internet connection. You can skip the next 4 lines (and start # directly with oe_get_keys) when running the examples locally.  its_pbf = file.path(tempdir(), \"test_its-example.osm.pbf\") file.copy(   from = system.file(\"its-example.osm.pbf\", package = \"osmextract\"),   to = its_pbf,   overwrite = TRUE ) #> [1] TRUE  # Get keys oe_get_keys(\"ITS Leeds\", download_directory = tempdir()) #>  [1] \"surface\"             \"lanes\"               \"bicycle\"             #>  [4] \"lit\"                 \"access\"              \"oneway\"              #>  [7] \"maxspeed\"            \"ref\"                 \"foot\"                #> [10] \"natural\"             \"lanes:backward\"      \"lanes:forward\"       #> [13] \"source:name\"         \"step_count\"          \"lanes:psv:backward\"  #> [16] \"alt_name\"            \"layer\"               \"motor_vehicle\"       #> [19] \"tunnel\"              \"bridge\"              \"covered\"             #> [22] \"incline\"             \"lanes:psv\"           \"service\"             #> [25] \"turn:lanes\"          \"turn:lanes:forward\"  \"frequency\"           #> [28] \"indoor\"              \"lcn\"                 \"level\"               #> [31] \"maxheight\"           \"operator\"            \"power\"               #> [34] \"source:geometry\"     \"substation\"          \"turn:lanes:backward\" #> [37] \"voltage\"             \"website\"              # Get keys and values oe_get_keys(\"ITS Leeds\", values = TRUE, download_directory = tempdir()) #> Found 38 unique keys, printed in ascending order of % NA values. The first 10 keys are:  #> surface (91% NAs) = {#asphalt = 12; #paved = 3; #cobblestone = 1; #paving_sto...} #> lanes (91% NAs) = {#2 = 9; #1 = 7} #> bicycle (92% NAs) = {#yes = 10; #designated = 5} #> lit (92% NAs) = {#yes = 15} #> access (92% NAs) = {#permissive = 12; #yes = 2} #> oneway (93% NAs) = {#yes = 13} #> maxspeed (93% NAs) = {#30 mph = 12} #> ref (94% NAs) = {#A660 = 9; #4184 = 1} #> foot (95% NAs) = {#yes = 5; #designated = 4} #> natural (96% NAs) = {#tree_row = 7} #> [Truncated output...]  # Subset some keys oe_get_keys(   \"ITS Leeds\", values = TRUE, which_keys = c(\"surface\", \"lanes\"),   download_directory = tempdir() ) #> Found 2 unique keys, printed in ascending order of % NA values.  #> surface (91% NAs) = {#asphalt = 12; #paved = 3; #cobblestone = 1; #paving_sto...} #> lanes (91% NAs) = {#2 = 9; #1 = 7}  # Print all (non-NA) values for a given set of keys res = oe_get_keys(\"ITS Leeds\", values = TRUE, download_directory = tempdir()) res[\"surface\"] #> $surface #>  [1] \"asphalt\"       \"asphalt\"       \"asphalt\"       \"asphalt\"       #>  [5] \"asphalt\"       \"asphalt\"       \"paved\"         \"cobblestone\"   #>  [9] \"asphalt\"       \"asphalt\"       \"paved\"         \"paved\"         #> [13] \"paving_stones\" \"asphalt\"       \"asphalt\"       \"asphalt\"       #> [17] \"asphalt\"       #>   # Get keys from an existing sf object its = oe_get(\"ITS Leeds\", download_directory = tempdir()) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 oe_get_keys(its, values = TRUE) #> Found 38 unique keys, printed in ascending order of % NA values. The first 10 keys are:  #> surface (91% NAs) = {#asphalt = 12; #paved = 3; #cobblestone = 1; #paving_sto...} #> lanes (91% NAs) = {#2 = 9; #1 = 7} #> bicycle (92% NAs) = {#yes = 10; #designated = 5} #> lit (92% NAs) = {#yes = 15} #> access (92% NAs) = {#permissive = 12; #yes = 2} #> oneway (93% NAs) = {#yes = 13} #> maxspeed (93% NAs) = {#30 mph = 12} #> ref (94% NAs) = {#A660 = 9; #4184 = 1} #> foot (95% NAs) = {#yes = 5; #designated = 4} #> natural (96% NAs) = {#tree_row = 7} #> [Truncated output...]  # Get keys from a character vector pointing to a file (might be faster than # reading the complete file and then filter it) its_path = oe_get(   \"ITS Leeds\", download_only = TRUE,   download_directory = tempdir(), quiet = TRUE ) oe_get_keys(its_path, values = TRUE) #> Found 38 unique keys, printed in ascending order of % NA values. The first 10 keys are:  #> surface (91% NAs) = {#asphalt = 12; #paved = 3; #cobblestone = 1; #paving_sto...} #> lanes (91% NAs) = {#2 = 9; #1 = 7} #> bicycle (92% NAs) = {#yes = 10; #designated = 5} #> lit (92% NAs) = {#yes = 15} #> access (92% NAs) = {#permissive = 12; #yes = 2} #> oneway (93% NAs) = {#yes = 13} #> maxspeed (93% NAs) = {#30 mph = 12} #> ref (94% NAs) = {#A660 = 9; #4184 = 1} #> foot (95% NAs) = {#yes = 5; #designated = 4} #> natural (96% NAs) = {#tree_row = 7} #> [Truncated output...]  # Add a key to an existing .gpkg file without repeating the # vectortranslate operations its = oe_get(\"ITS Leeds\", download_directory = tempdir()) #> The input place was matched with: ITS Leeds #> The chosen file was already detected in the download directory. Skip downloading. #> The corresponding gpkg file was already detected. Skip vectortranslate operations. #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 colnames(its) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"z_order\"    \"other_tags\" \"geometry\"   its_extra = oe_read(   its_path,   query = \"SELECT *, hstore_get_value(other_tags, 'oneway') AS oneway FROM lines\",   quiet = TRUE ) colnames(its_extra) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"z_order\"    \"other_tags\" \"oneway\"     #> [11] \"geometry\"    # The following fails since there is no points layer in the .gpkg file if (FALSE) { oe_get_keys(its_path, layer = \"points\")}  # Add layer and read keys its_path = oe_get(   \"ITS Leeds\", layer = \"points\", download_only = TRUE,   download_directory = tempdir(), quiet = TRUE ) oe_get_keys(its_path, layer = \"points\") #>  [1] \"amenity\"                 \"addr:postcode\"           #>  [3] \"addr:street\"             \"addr:city\"               #>  [5] \"fhrs:id\"                 \"capacity\"                #>  [7] \"covered\"                 \"addr:housenumber\"        #>  [9] \"operator\"                \"bicycle_parking\"         #> [11] \"addr:suburb\"             \"natural\"                 #> [13] \"shop\"                    \"crossing\"                #> [15] \"naptan:AtcoCode\"         \"naptan:Bearing\"          #> [17] \"naptan:CommonName\"       \"naptan:PlusbusZoneRef\"   #> [19] \"naptan:ShortCommonName\"  \"naptan:Street\"           #> [21] \"naptan:verified\"         \"addr:housename\"          #> [23] \"bus\"                     \"collection_times\"        #> [25] \"local_ref\"               \"naptan:Crossing\"         #> [27] \"naptan:Indicator\"        \"naptan:Landmark\"         #> [29] \"public_transport\"        \"condition\"               #> [31] \"entrance\"                \"ref:UK:leedscc:bin\"      #> [33] \"shelter\"                 \"waste_basket:model\"      #> [35] \"crossing_ref\"            \"wheelchair\"              #> [37] \"brand\"                   \"brand:wikidata\"          #> [39] \"brand:wikipedia\"         \"noexit\"                  #> [41] \"booth\"                   \"old_name\"                #> [43] \"opening_hours\"           \"advertising\"             #> [45] \"foot\"                    \"kerb\"                    #> [47] \"post_box:type\"           \"tactile_paving\"          #> [49] \"takeaway\"                \"toilets:wheelchair\"      #> [51] \"addr:unit\"               \"cuisine\"                 #> [53] \"level\"                   \"naptan:Notes\"            #> [55] \"royal_cypher\"            \"source:addr\"             #> [57] \"timetable\"               \"tourism\"                 #> [59] \"website\"                 \"access\"                  #> [61] \"addr:source\"             \"artist_name\"             #> [63] \"artwork_type\"            \"atm\"                     #> [65] \"bicycle\"                 \"building\"                #> [67] \"contact:website\"         \"direction\"               #> [69] \"fee\"                     \"healthcare\"              #> [71] \"historic\"                \"horse\"                   #> [73] \"live_display\"            \"loc_name\"                #> [75] \"material\"                \"motor_vehicle\"           #> [77] \"naptan:BusStopType\"      \"not:addr:postcode\"       #> [79] \"phone\"                   \"post_box:design\"         #> [81] \"recycling:glass_bottles\" \"recycling:paper\"         #> [83] \"traffic_signals\"         \"url\"                     #> [85] \"wikidata\"                 # Remove .pbf and .gpkg files in tempdir rm(its_pbf, res, its_path, its, its_extra) oe_clean(tempdir())"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Import transport networks used by a specific mode of transport — oe_get_network","title":"Import transport networks used by a specific mode of transport — oe_get_network","text":"function wrapper around oe_get() can used import road network given place mode transport. Check Details precise description procedures used filter OSM ways according mode transport.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import transport networks used by a specific mode of transport — oe_get_network","text":"","code":"oe_get_network(place, mode = c(\"cycling\", \"driving\", \"walking\"), ...)"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import transport networks used by a specific mode of transport — oe_get_network","text":"place Description geographical area matched .osm.pbf file. Can either length-1 character vector, sf/sfc/bbox object, numeric vector coordinates length 2. last case, assumed EPSG code 4326 specified c(LON, LAT), can use CRS sf/sfc/bbox objects. See Details Examples oe_match(). mode character string length one denoting desired mode transport. Can abbreviated. Currently cycling (default), driving walking supported. ... Additional arguments passed oe_get() boundary force_download.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import transport networks used by a specific mode of transport — oe_get_network","text":"sf object.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import transport networks used by a specific mode of transport — oe_get_network","text":"definition usable transport network taken Python packages osmnx pyrosm several documents found online, .e. https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Access_restrictions, https://wiki.openstreetmap.org/wiki/Key:access. See also discussion https://github.com/ropensci/osmextract/issues/153. cycling mode transport (.e. default value mode parameter) selects OSM ways meet following conditions: highway tag missing; highway tag equal abandoned, bus_guideway, byway, construction, corridor, elevator, fixme, escalator, gallop, historic, , planned, platform, proposed, raceway steps; highway tag equal motorway, motorway_link, footway, bridleway pedestrian unless tag bicycle equal yes, designated, permissive destination (see details); access tag equal private ; bicycle tag equal , use_sidepath, private, restricted; service tag contain string private (.e. private, private_access similar); walking mode transport selects OSM ways meet following conditions: highway tag missing; highway tag equal abandoned, bus_guideway, byway, construction, corridor, elevator, fixme, escalator, gallop, historic, , planned, platform, proposed, raceway, motorway motorway_link; highway tag equal cycleway unless foot tag equal yes; access tag equal private ; foot tag equal , use_sidepath, private, restricted; service tag contain string private (.e. private, private_access similar). driving mode transport selects OSM ways meet following conditions: highway tag missing; highway tag equal abandoned, bus_guideway, byway, construction, corridor, elevator, fixme, escalator, gallop, historic, , planned, platform, proposed, cycleway, pedestrian, bridleway, path, footway; access tag equal private ; service tag contain string private (.e. private, private_access similar). Feel free create new issue github repo want suggest modifications current filters propose new values alternative modes transport.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/oe_get_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import transport networks used by a specific mode of transport — oe_get_network","text":"","code":"# Copy the ITS file to tempdir() to make sure that the examples do not # require internet connection. You can skip the next 4 lines (and start # directly with oe_get_keys) when running the examples locally.  its_pbf = file.path(tempdir(), \"test_its-example.osm.pbf\") file.copy(   from = system.file(\"its-example.osm.pbf\", package = \"osmextract\"),   to = its_pbf,   overwrite = TRUE ) #> [1] TRUE  # default value returned by OSM its = oe_get(   \"ITS Leeds\", quiet = TRUE, download_directory = tempdir() ) plot(its[\"highway\"], lwd = 2, key.pos = 4, key.width = lcm(2.75))  # walking mode of transport its_walking = oe_get_network(   \"ITS Leeds\", mode = \"walking\",   download_directory = tempdir(), quiet = TRUE ) plot(its_walking[\"highway\"], lwd = 2, key.pos = 4, key.width = lcm(2.75))  # driving mode of transport its_driving = oe_get_network(   \"ITS Leeds\", mode = \"driving\",   download_directory = tempdir(), quiet = TRUE ) plot(its_driving[\"highway\"], lwd = 2, key.pos = 4, key.width = lcm(2.75))   # Remove .pbf and .gpkg files in tempdir oe_clean(tempdir())"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Match input place with a url — oe_match","title":"Match input place with a url — oe_match","text":"function used match input place URL .osm.pbf file (file-size, present). URLs stored several provider's databases. See oe_providers() examples.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match input place with a url — oe_match","text":"","code":"oe_match(place, ...)  # S3 method for default oe_match(place, ...)  # S3 method for bbox oe_match(place, ...)  # S3 method for sf oe_match(place, ...)  # S3 method for sfc oe_match(place, provider = \"geofabrik\", level = NULL, quiet = FALSE, ...)  # S3 method for numeric oe_match(place, provider = \"geofabrik\", quiet = FALSE, ...)  # S3 method for character oe_match(   place,   provider = \"geofabrik\",   quiet = FALSE,   match_by = \"name\",   max_string_dist = 1,   ... )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match input place with a url — oe_match","text":"place Description geographical area matched .osm.pbf file. Can either length-1 character vector, sf/sfc/bbox object, numeric vector coordinates length 2. last case, assumed EPSG code 4326 specified c(LON, LAT), can use CRS sf/sfc/bbox objects. See Details Examples oe_match(). ... arguments passed methods provider provider used download data? Available providers can found following command: oe_providers(). oe_get() oe_match(), place equal Leeds, provider set equal test. just simple examples internal tests. level integer representing desired hierarchical level case spatial matching. geofabrik provider, example, 1 corresponds continent-level datasets, 2 countries, 3 corresponds regions 4 subregions. Hence, approximately say smaller administrative units correspond bigger levels. NULL, default, oe_* functions select highest available level. See Details Examples oe_match(). quiet Boolean. FALSE, function prints informative messages. Starting sf version 0.9.6, quiet equal FALSE, vectortranslate operations display progress bar. match_by column provider's database used matching input place .osm.pbf file? default \"name\". Check Details Examples oe_match() understand parameter works. Ignored place character vector since matching performed spatial operation. max_string_dist Numerical value greater equal 0. maximum distance fuzzy matching (.e. Approximate String Distance, see adist()) input place match_by column tolerate testing alternative providers looking geographical matching Nominatim API? parameter set equal 0 match_by equal iso3166_1_alpha2 iso3166_2. Check Details Examples oe_match() understand parameter important. Ignored place character vector since matching performed spatial operation.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match input place with a url — oe_match","text":"list two elements, named url file_size. first element URL .osm.pbf file associated input place, second element size file bytes (may NULL NA)","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match input place with a url — oe_match","text":"input place specified spatial object (either sf sfc), function return geographical area completely contains object (error). argument level (must specified integer 1 4, extreme values included) used select multiple geographically nested areas. roughly say smaller administrative units correspond higher levels. Check help page chosen provider details level field. default, level = NULL, means oe_match() return area corresponding highest available level. geographical area desired level, function return error. multiple areas level intersecting input place, function return area whose centroid closest input place. input place specified character vector multiple plausible matches input place match_by column, function return warning select first match. See Examples. hand, approximate string distance input place best match match_by column greater max_string_dist, function look exact matches (.e. max_string_dist = 0) supported providers. finds exact match, return corresponding URL. Otherwise, match_by equal \"name\", try geolocate input place using Nominatim API, perform spatial matching operation (see Examples introductory vignette), , match_by != \"name\", return error. fields iso3166_1_alpha2 iso3166_2 used Geofabrik provider perform matching operations using ISO 3166-1 alpha-2 ISO 3166-2 codes. See geofabrik_zones details.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match input place with a url — oe_match","text":"","code":"# The simplest example: oe_match(\"Italy\") #> The input place was matched with: Italy #> $url #> [1] \"https://download.geofabrik.de/europe/italy-latest.osm.pbf\" #>  #> $file_size #> [1] 1.7e+09 #>   # The default provider is \"geofabrik\", but we can change that: oe_match(\"Leeds\", provider = \"bbbike\") #> The input place was matched with: Leeds #> $url #> [1] \"https://download.bbbike.org/osm/bbbike/Leeds/Leeds.osm.pbf\" #>  #> $file_size #> [1] 24362749 #>   # By default, the matching operations are performed through the column # \"name\" in the provider's database but this can be a problem. Hence, # you can perform the matching operations using other columns: oe_match(\"RU\", match_by = \"iso3166_1_alpha2\") #> The input place was matched with: RU #> $url #> [1] \"https://download.geofabrik.de/russia-latest.osm.pbf\" #>  #> $file_size #> [1] 3.2e+09 #>  # Run oe_providers() for reading a short description of all providers and # check the help pages of the corresponding databases to learn which fields # are present.  # You can always increase the max_string_dist argument, but it can be # dangerous: oe_match(\"London\", max_string_dist = 3, quiet = FALSE) #> The input place was matched with: Jordan #> $url #> [1] \"https://download.geofabrik.de/asia/jordan-latest.osm.pbf\" #>  #> $file_size #> [1] 2.9e+07 #>   # Match the input zone using an sfc object: milan_duomo = sf::st_sfc(sf::st_point(c(1514924, 5034552)), crs = 3003) oe_match(milan_duomo, quiet = FALSE) #> The input place was matched with Nord-Ovest.  #> $url #> [1] \"https://download.geofabrik.de/europe/italy/nord-ovest-latest.osm.pbf\" #>  #> $file_size #> [1] 4.7e+08 #>  leeds = sf::st_sfc(sf::st_point(c(430147.8, 433551.5)), crs = 27700) oe_match(leeds, provider = \"bbbike\") #> The input place was matched with Leeds.  #> $url #> [1] \"https://download.bbbike.org/osm/bbbike/Leeds/Leeds.osm.pbf\" #>  #> $file_size #> [1] 24362749 #>   # If you specify more than one sfg object, then oe_match will select the OSM # extract that covers all areas milan_leeds = sf::st_sfc(   sf::st_point(c(9.190544, 45.46416)), # Milan   sf::st_point(c(-1.543789, 53.7974)), # Leeds   crs = 4326 ) oe_match(milan_leeds) #> The input place was matched with Europe.  #> $url #> [1] \"https://download.geofabrik.de/europe-latest.osm.pbf\" #>  #> $file_size #> [1] 2.63e+10 #>   # Match the input zone using a numeric vector of coordinates # (in which case crs = 4326 is assumed) oe_match(c(9.1916, 45.4650)) # Milan, Duomo using CRS = 4326 #> The input place was matched with Nord-Ovest.  #> $url #> [1] \"https://download.geofabrik.de/europe/italy/nord-ovest-latest.osm.pbf\" #>  #> $file_size #> [1] 4.7e+08 #>   # The following returns a warning since Berin is matched both # with Benin and Berlin oe_match(\"Berin\", quiet = FALSE) #> The input place was matched with: Benin #> $url #> [1] \"https://download.geofabrik.de/africa/benin-latest.osm.pbf\" #>  #> $file_size #> [1] 3.7e+07 #>   # If the input place does not match any zone in the chosen provider, then the # function will test the other providers: oe_match(\"Leeds\") #> No exact match found for place = Leeds and provider = geofabrik. Best match is Laos.  #> Checking the other providers. #> An exact string match was found using provider = bbbike. #> $url #> [1] \"https://download.bbbike.org/osm/bbbike/Leeds/Leeds.osm.pbf\" #>  #> $file_size #> [1] 24362749 #>   # If the input place cannot be exactly matched with any zone in any provider, # then the function will try to geolocate the input and then it will perform a # spatial match: if (FALSE) { oe_match(\"Milan\")}  # The level parameter can be used to select smaller or bigger geographical # areas during spatial matching yak = c(-120.51084, 46.60156) if (FALSE) { oe_match(yak, level = 3) # error oe_match(yak, level = 2) # by default, level is equal to the maximum value oe_match(yak, level = 1)}"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Check patterns in the provider's databases — oe_match_pattern","title":"Check patterns in the provider's databases — oe_match_pattern","text":"function used explore provider's databases look matches. function can useful combination oe_match() oe_get() exploratory analysis easy match. See Examples.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check patterns in the provider's databases — oe_match_pattern","text":"","code":"oe_match_pattern(pattern, ...)  # S3 method for numeric oe_match_pattern(pattern, full_row = FALSE, ...)  # S3 method for sf oe_match_pattern(pattern, full_row = FALSE, ...)  # S3 method for bbox oe_match_pattern(pattern, full_row = FALSE, ...)  # S3 method for sfc oe_match_pattern(pattern, full_row = FALSE, ...)  # S3 method for character oe_match_pattern(pattern, match_by = \"name\", full_row = FALSE, ...)"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check patterns in the provider's databases — oe_match_pattern","text":"pattern Description pattern. Can either length-1 character vector, sf/sfc/bbox object, numeric vector coordinates length 2. last case, assumed EPSG code 4326 specified c(LON, LAT), can use CRS sf/sfc/bbox objects. ... arguments passed methods full_row Boolean. Return columns matching rows? FALSE default. match_by Name column provider's database used find match case character input. cases, match performed using spatial overlay operation output returns values stored name column (even full sf object full_row TRUE).","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check patterns in the provider's databases — oe_match_pattern","text":"list character vectors sf objects (according value parameter full_row). OSM zone can matched input string, function returns empty list.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_match_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check patterns in the provider's databases — oe_match_pattern","text":"","code":"oe_match_pattern(\"Yorkshire\") #> $geofabrik #> [1] \"East Yorkshire with Hull\" \"North Yorkshire\"          #> [3] \"South Yorkshire\"          \"West Yorkshire\"           #>  #> $openstreetmap_fr #> [1] \"Yorkshire And The Humber\" #>   res = oe_match_pattern(\"Yorkshire\", full_row = TRUE) lapply(res, function(x) sf::st_drop_geometry(x)[, 1:3]) #> $geofabrik #>                           id                     name  parent #> 106 east-yorkshire-with-hull East Yorkshire with Hull england #> 275          north-yorkshire          North Yorkshire england #> 352          south-yorkshire          South Yorkshire england #> 464           west-yorkshire           West Yorkshire england #>  #> $openstreetmap_fr #>                           id                     name  parent #> 701 yorkshire_and_the_humber Yorkshire And The Humber england #>   oe_match_pattern(c(9, 45)) # long/lat for Milan, Italy #> $geofabrik #> [1] \"Europe\"     \"Italy\"      \"Nord-Ovest\" #>  #> $openstreetmap_fr #> [1] \"Italy\"     \"Lombardia\" #>"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_providers.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of available providers — oe_providers","title":"Summary of available providers — oe_providers","text":"function used display short summary major characteristics databases associated available providers.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_providers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of available providers — oe_providers","text":"","code":"oe_providers(quiet = FALSE)"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_providers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of available providers — oe_providers","text":"quiet Boolean. FALSE, function prints informative messages. Starting sf version 0.9.6, quiet equal FALSE, vectortranslate operations display progress bar.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_providers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of available providers — oe_providers","text":"data.frame 4 columns representing name available provider, name corresponding database number features fields.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_providers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of available providers — oe_providers","text":"","code":"oe_providers() #> Check the corresponding help pages to read more details about the fields in each database (e.g. ?geofabrik_zones). #>   available_providers          database_name number_of_zones number_of_fields #> 1           geofabrik        geofabrik_zones             475                8 #> 2              bbbike           bbbike_zones             236                5 #> 3    openstreetmap_fr openstreetmap_fr_zones            1135                6"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a .pbf or .gpkg object from file or url — oe_read","title":"Read a .pbf or .gpkg object from file or url — oe_read","text":"function used read .pbf .gpkg object file URL. wrapper around oe_download(), oe_vectortranslate(), sf::st_read(), creating easy way download, convert, read .pbf .gpkg file. Check introductory vignette help pages wrapped function details.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a .pbf or .gpkg object from file or url — oe_read","text":"","code":"oe_read(   file_path,   layer = \"lines\",   ...,   provider = NULL,   download_directory = oe_download_directory(),   file_size = NULL,   force_download = FALSE,   max_file_size = 5e+08,   download_only = FALSE,   skip_vectortranslate = FALSE,   vectortranslate_options = NULL,   osmconf_ini = NULL,   extra_tags = NULL,   force_vectortranslate = FALSE,   never_skip_vectortranslate = FALSE,   boundary = NULL,   boundary_type = c(\"spat\", \"clipsrc\"),   quiet = FALSE )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a .pbf or .gpkg object from file or url — oe_read","text":"file_path URL path .pbf .gpkg file. URL, must specified using HTTP/HTTPS protocol. layer layer read ? Typically points, lines (default), multilinestrings, multipolygons other_relations. specify ad-hoc query using argument query (see introductory vignette examples), oe_get() oe_read() read layer specified query ignore layer. See also #122. ... (Named) arguments passed sf::st_read(), like query, wkt_filter stringsAsFactors.  Check introductory vignette understand create (SQL-like) queries. provider provider used download data? Available providers can found following command: oe_providers(). oe_get() oe_match(), place equal Leeds, provider set equal test. just simple examples internal tests. download_directory download file containing OSM data? default equal oe_download_directory(), equal tempdir() changes time restart R. can set persistent download_directory adding following .Renviron file (e.g. edit_r_environ function usethis package): OSMEXT_DOWNLOAD_DIRECTORY=/path//osm/data. file_size big file? Optional. NA default. bigger max_file_size function run interactive mode, interactive menu displayed, asking permission download file. force_download .osm.pbf file updated already downloaded? FALSE default. parameter used update old .osm.pbf files. max_file_size maximum file size download without asking interactive mode. Default: 5e+8, half gigabyte. download_only Boolean. TRUE, function returns path matched file stored, instead reading . FALSE default. skip_vectortranslate Boolean. TRUE, function skips vectortranslate operations reads (simply returns path) .osm.pbf file. FALSE default. vectortranslate_options Options passed sf::gdal_utils() argument options. Set default. Check details introductory vignette help page oe_vectortranslate(). osmconf_ini configuration file. See documentation gdal.org. Check details introductory vignette help page oe_vectortranslate(). Set default. extra_tags additional columns, corresponding OSM tags, resulting dataset? NULL default. Check introductory vignette help pages oe_vectortranslate() oe_get_keys(). Ignored osmconf_ini NULL. force_vectortranslate Boolean. Force original .pbf file translated .gpkg file, even .gpkg name already exists? FALSE default. tags extra_tags match data previously translated .gpkg files translation occurs (see #173 details). Check introductory vignette help page oe_vectortranslate(). never_skip_vectortranslate Boolean. used case user passed .ini file vectortranslate options (since, case, difficult determine existing .gpkg file generated following options.) boundary sf/sfc/bbox object used create spatial filter vectortranslate operations. type filter can chosen using argument boundary_type. boundary_type character vector length 1 specifying type spatial filter. spat filter selects features intersect given area, clipsrc also clips geometries. Check examples also details. quiet Boolean. FALSE, function prints informative messages. Starting sf version 0.9.6, quiet equal FALSE, vectortranslate operations display progress bar.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a .pbf or .gpkg object from file or url — oe_read","text":"sf object , download_only argument equals TRUE, character vector.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a .pbf or .gpkg object from file or url — oe_read","text":"arguments provider, download_directory, file_size, force_download, max_file_size ignored file_path points existing .pbf .gpkg file. Please note add field existing .gpkg file using argument extra_tags without rerunning vectortranslate process corresponding .pbf file. hand, can extract tags other_tags field new columns. See examples oe_get_keys() details.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a .pbf or .gpkg object from file or url — oe_read","text":"","code":"# Read an existing .pbf file. First we need to copy a .pbf file into a # temporary directory its_pbf = file.path(tempdir(), \"test_its-example.osm.pbf\") file.copy(   from = system.file(\"its-example.osm.pbf\", package = \"osmextract\"),   to = its_pbf ) #> [1] TRUE oe_read(its_pbf) #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 9 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84  # Read a new layer oe_read(its_pbf, layer = \"points\") #> Adding a new layer to the .gpkg file. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading layer `points' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 186 features and 10 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.568766 ymin: 53.80569 xmax: -1.549451 ymax: 53.81136 #> Geodetic CRS:  WGS 84  # The following example shows how to add new tags names(oe_read(its_pbf, extra_tags = c(\"oneway\", \"ref\"), quiet = TRUE)) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"oneway\"     \"ref\"        \"z_order\"    #> [11] \"other_tags\" \"geometry\"    # Read an existing .gpkg file. This file was created internally by oe_read(). its_gpkg = file.path(tempdir(), \"test_its-example.gpkg\") oe_read(its_gpkg) #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 11 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84  # You cannot add any new layer to an existing .gpkg file but you can extract # some of the tags in other_tags. Check oe_get_keys() for more details. names(oe_read(its_gpkg, extra_tags = c(\"maxspeed\"))) # doesn't work #> Reading layer `lines' from data source `/tmp/RtmpM8EDhc/test_its-example.gpkg' using driver `GPKG' #> Simple feature collection with 189 features and 11 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.562458 ymin: 53.80471 xmax: -1.548076 ymax: 53.81105 #> Geodetic CRS:  WGS 84 #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"oneway\"     \"ref\"        \"z_order\"    #> [11] \"other_tags\" \"geometry\"   # Instead, use the query argument names(oe_read(   its_gpkg,   quiet = TRUE,   query =   \"SELECT *,   hstore_get_value(other_tags, 'maxspeed') AS maxspeed   FROM lines   \" )) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"oneway\"     \"ref\"        \"z_order\"    #> [11] \"other_tags\" \"maxspeed\"   \"geometry\"    # Read from a URL my_url = \"https://github.com/ropensci/osmextract/raw/master/inst/its-example.osm.pbf\" # Please note that if you read from a URL which is not linked to one of the # supported providers, you need to specify the provider parameter: if (FALSE) { oe_read(my_url, provider = \"test\", quiet = FALSE)}  # Remove .pbf and .gpkg files in tempdir oe_clean(tempdir())"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for a place and return an sf data frame locating it — oe_search","title":"Search for a place and return an sf data frame locating it — oe_search","text":"(internal experimental) function provides simple interface nominatim service finding geographical location place names.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for a place and return an sf data frame locating it — oe_search","text":"","code":"oe_search(   place,   base_url = \"https://nominatim.openstreetmap.org\",   destfile = tempfile(fileext = \".geojson\"),   ... )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for a place and return an sf data frame locating it — oe_search","text":"place Text string containing name place location found, \"Leeds\" \"Milan\". base_url URL nominatim server use. main open server hosted OpenStreetMap default. destfile name destination file output search query, .geojson file, saved. ... Extra arguments passed sf::st_read.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for a place and return an sf data frame locating it — oe_search","text":"sf object corresponding input place. sf object read sf::st_read() based geojson file returned Nominatim API.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update all the .osm.pbf files saved in a directory — oe_update","title":"Update all the .osm.pbf files saved in a directory — oe_update","text":"function used re-download .osm.pbf files stored download_directory firstly downloaded oe_get(). See Details.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update all the .osm.pbf files saved in a directory — oe_update","text":"","code":"oe_update(   download_directory = oe_download_directory(),   quiet = FALSE,   delete_gpkg = TRUE,   max_file_size = 5e+08,   ... )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update all the .osm.pbf files saved in a directory — oe_update","text":"download_directory Character string path directory .osm.pbf files saved. quiet Boolean. FALSE function prints informative messages. See Details. delete_gpkg Boolean. TRUE function deletes old .gpkg files. added parameter minimize probability accidentally reading-old -synchronized .gpkg files. See Details. Defaults TRUE. max_file_size maximum file size download without asking interactive mode. Default: 5e+8, half gigabyte. ... Additional parameter passed oe_get() (stringsAsFactors query).","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update all the .osm.pbf files saved in a directory — oe_update","text":"path(s) .osm.pbf file(s) updated.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update all the .osm.pbf files saved in a directory — oe_update","text":"function used re-download .osm.pbf files stored directory (specified download_directory param) firstly downloaded oe_get() . name files must begin name one supported providers (see oe_providers()) must end .osm.pbf. files directory match format ignored. process re-downloading .osm.pbf files performed using function oe_get() . appropriate provider determined looking first word path .osm.pbf file. place determined looking second word file path matching performed id column provider's database. , example, path geofabrik_italy-latest-update.osm.pbf matched provider \"geofabrik\" geographical zone italy column id geofabrik_zones. parameter delete_gpkg used delete .gpkg files download_directory. decided set default value TRUE minimize possibility reading-old non-synchronized .gpkg files. set delete_gpkg = FALSE, need manually reconvert files using oe_get() oe_vectortranslate() . set parameter quiet FALSE, function print useful messages regarding characteristics files updating . precisely, print output columns size, mtime ctime file.info(). Please note meaning mtime ctime depends OS file system. Check file.info().","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update all the .osm.pbf files saved in a directory — oe_update","text":"","code":"if (FALSE) { # Set up a fake directory with .pbf and .gpkg files fake_dir = tempdir() # Fill the directory oe_get(\"Andorra\", download_directory = fake_dir, download_only = TRUE) # Check the directory list.files(fake_dir, pattern = \"gpkg|pbf\") # Update all .pbf files and delete all .gpkg files oe_update(fake_dir, quiet = TRUE) list.files(fake_dir, pattern = \"gpkg|pbf\")}"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_vectortranslate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a .osm.pbf file into .gpkg format — oe_vectortranslate","title":"Translate a .osm.pbf file into .gpkg format — oe_vectortranslate","text":"function used translate .osm.pbf file .gpkg format. conversion performed using ogr2ogr via vectortranslate utility sf::gdal_utils() . created following suggestions maintainers GDAL. See Details Examples understand basic usage, check introductory vignette complex use-cases.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_vectortranslate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a .osm.pbf file into .gpkg format — oe_vectortranslate","text":"","code":"oe_vectortranslate(   file_path,   layer = \"lines\",   vectortranslate_options = NULL,   osmconf_ini = NULL,   extra_tags = NULL,   force_vectortranslate = FALSE,   never_skip_vectortranslate = FALSE,   boundary = NULL,   boundary_type = c(\"spat\", \"clipsrc\"),   quiet = FALSE )"},{"path":"https://docs.ropensci.org/osmextract/reference/oe_vectortranslate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a .osm.pbf file into .gpkg format — oe_vectortranslate","text":"file_path Character string representing path input .pbf .osm.pbf file. layer layer read ? Typically points, lines (default), multilinestrings, multipolygons other_relations. specify ad-hoc query using argument query (see introductory vignette examples), oe_get() oe_read() read layer specified query ignore layer. See also #122. vectortranslate_options Options passed sf::gdal_utils() argument options. Set default. Check details introductory vignette help page oe_vectortranslate(). osmconf_ini configuration file. See documentation gdal.org. Check details introductory vignette help page oe_vectortranslate(). Set default. extra_tags additional columns, corresponding OSM tags, resulting dataset? NULL default. Check introductory vignette help pages oe_vectortranslate() oe_get_keys(). Ignored osmconf_ini NULL. force_vectortranslate Boolean. Force original .pbf file translated .gpkg file, even .gpkg name already exists? FALSE default. tags extra_tags match data previously translated .gpkg files translation occurs (see #173 details). Check introductory vignette help page oe_vectortranslate(). never_skip_vectortranslate Boolean. used case user passed .ini file vectortranslate options (since, case, difficult determine existing .gpkg file generated following options.) boundary sf/sfc/bbox object used create spatial filter vectortranslate operations. type filter can chosen using argument boundary_type. boundary_type character vector length 1 specifying type spatial filter. spat filter selects features intersect given area, clipsrc also clips geometries. Check examples also details. quiet Boolean. FALSE, function prints informative messages. Starting sf version 0.9.6, quiet equal FALSE, vectortranslate operations display progress bar.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_vectortranslate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a .osm.pbf file into .gpkg format — oe_vectortranslate","text":"Character string representing path .gpkg file.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/oe_vectortranslate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate a .osm.pbf file into .gpkg format — oe_vectortranslate","text":"new .gpkg file created directory input .osm.pbf file. translation process performed using vectortranslate utility sf::gdal_utils(). operation can customized several ways modifying parameters layer, extra_tags, osmconf_ini, vectortranslate_options, boundary boundary_type. .osm.pbf files processed GDAL usually categorized 5 layers, named points, lines, multilinestrings, multipolygons other_relations. Check first paragraphs details. function can covert one layer time, parameter layer used specify layer .osm.pbf file converted. Several layers different names can stored .gpkg file. default, function convert lines layer (common one according experience). arguments osmconf_ini extra_tags used modify GDAL reads processes .osm.pbf file. precisely, several operations GDAL performs input .osm.pbf file governed CONFIG file, can checked following link. basic components OSM data called elements divided nodes, ways relations, , example, code line 7 file used determine ways assumed polygons (according simple-feature definition polygon) closed. Moreover, OSM data usually described using several tags, .e pairs two items: key value. code lines 33, 53, 85, 103, 121 used determine, layer, tags explicitly reported fields (tags stored other_tags column). parameter extra_tags used determine extra tags (.e. key/value pairs) added .gpkg file (default ones). default, vectortranslate operations skipped function detects file path input file, .gpkg extension, layer name parameter layer extra_tags. case function simply return path .gpkg file. behaviour can overwritten setting force_vectortranslate = TRUE. vectortranslate operations never skipped osmconf_ini, vectortranslate_options, boundary boundary_type arguments NULL. parameter osmconf_ini used pass CONFIG file case need control GDAL operations. Check package introductory vignette example. osmconf_ini equal NULL (default value), function uses standard osmconf.ini file defined GDAL (extra tags). parameter vectortranslate_options used control options passed ogr2ogr via sf::gdal_utils() converting .osm.pbf .gpkg formats. ogr2ogr can perform various operations conversion process, spatial filters SQL queries. operations can tuned using vectortranslate_options argument. NULL (default value), vectortranslate_options set equal c(\"-f\", \"GPKG\", \"-overwrite\", \"-oo\", paste0(\"CONFIG_FILE=\", osmconf_ini), \"-lco\", \"GEOMETRY_NAME=geometry\", layer). Explanation: \"-f\", \"GPKG\" says output format GPKG; \"-overwrite used delete existing layer recreate empty; \"-oo\", paste0(\"CONFIG_FILE=\", osmconf_ini) used set Open Options .osm.pbf file change CONFIG file (case user asks extra tag totally different CONFIG file); \"-lco\", \"GEOMETRY_NAME=geometry\" used change layer creation options .gpkg file modify name geometry column; layer indicates layer converted. vectortranslate_options NULL, options c(\"-f\", \"GPKG\", \"-overwrite\", \"-oo\", \"CONFIG_FILE=\", path--config-file, \"-lco\", \"GEOMETRY_NAME=geometry\", layer) always appended unless user explicitly sets different default parameters arguments -f, -oo, -lco, layer. arguments boundary boundary_type can used set spatial filter vectortranslate operations (speed process) using sf sfc object (POLYGON MULTIPOLYGON). default arguments create rectangular spatial filter selects features intersect area. Setting boundary_type = \"clipsrc\" clips geometries. cases, appropriate options automatically added vectortranslate_options (unless user explicitly sets different default options). Check Examples oe_get() introductory vignette. See also help page sf::gdal_utils() ogr2ogr examples extensive documentation available options can tuned vectortranslate process.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/oe_vectortranslate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a .osm.pbf file into .gpkg format — oe_vectortranslate","text":"","code":"# First we need to match an input zone with a .osm.pbf file (its_match = oe_match(\"ITS Leeds\")) #> The input place was matched with: ITS Leeds #> $url #> [1] \"https://github.com/ropensci/osmextract/raw/master/inst/its-example.osm.pbf\" #>  #> $file_size #> [1] 40792 #>   # Copy ITS file to tempdir so that the examples do not require internet # connection. You can skip the next 3 lines (and start directly with # oe_download()) when running the examples locally.  file.copy(   from = system.file(\"its-example.osm.pbf\", package = \"osmextract\"),   to = file.path(tempdir(), \"test_its-example.osm.pbf\"),   overwrite = TRUE ) #> [1] TRUE  # The we can download the .osm.pbf file (if it was not already downloaded) its_pbf = oe_download(   file_url = its_match$url,   file_size = its_match$file_size,   download_directory = tempdir(),   provider = \"test\" ) #> The chosen file was already detected in the download directory. Skip downloading.  # Check that the file was downloaded list.files(tempdir(), pattern = \"pbf|gpkg\") #> [1] \"test_its-example.osm.pbf\"  # Convert to gpkg format its_gpkg = oe_vectortranslate(its_pbf) #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file!  # Now there is an extra .gpkg file list.files(tempdir(), pattern = \"pbf|gpkg\") #> [1] \"test_its-example.gpkg\"    \"test_its-example.osm.pbf\"  # Check the layers of the .gpkg file sf::st_layers(its_gpkg, do_count = TRUE) #> Driver: GPKG  #> Available layers: #>   layer_name geometry_type features fields crs_name #> 1      lines   Line String      189      9   WGS 84  # Add points layer its_gpkg = oe_vectortranslate(its_pbf, layer = \"points\") #> Adding a new layer to the .gpkg file. #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! sf::st_layers(its_gpkg, do_count = TRUE) #> Driver: GPKG  #> Available layers: #>   layer_name geometry_type features fields crs_name #> 1      lines   Line String      189      9   WGS 84 #> 2     points         Point      186     10   WGS 84  # Add extra tags to the lines layer names(sf::st_read(its_gpkg, layer = \"lines\", quiet = TRUE)) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"z_order\"    \"other_tags\" \"geometry\"   its_gpkg = oe_vectortranslate(   its_pbf,   extra_tags = c(\"oneway\", \"maxspeed\") ) #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! names(sf::st_read(its_gpkg, layer = \"lines\", quiet = TRUE)) #>  [1] \"osm_id\"     \"name\"       \"highway\"    \"waterway\"   \"aerialway\"  #>  [6] \"barrier\"    \"man_made\"   \"oneway\"     \"maxspeed\"   \"z_order\"    #> [11] \"other_tags\" \"geometry\"    # Adjust vectortranslate options and convert only 10 features # for the lines layer oe_vectortranslate(   its_pbf,   vectortranslate_options = c(\"-limit\", 10) ) #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> [1] \"/tmp/RtmpM8EDhc/test_its-example.gpkg\" sf::st_layers(its_gpkg, do_count = TRUE) #> Driver: GPKG  #> Available layers: #>   layer_name geometry_type features fields crs_name #> 1     points         Point      186     10   WGS 84 #> 2      lines   Line String       10      9   WGS 84  # Remove .pbf and .gpkg files in tempdir oe_clean(tempdir())"},{"path":"https://docs.ropensci.org/osmextract/reference/openstreetmap_fr_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"An sf object of geographical zones taken from download.openstreetmap.fr — openstreetmap_fr_zones","title":"An sf object of geographical zones taken from download.openstreetmap.fr — openstreetmap_fr_zones","text":"sf object containing URLs, names, file-sizes OSM extracts stored http://download.openstreetmap.fr/.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/openstreetmap_fr_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An sf object of geographical zones taken from download.openstreetmap.fr — openstreetmap_fr_zones","text":"","code":"openstreetmap_fr_zones"},{"path":"https://docs.ropensci.org/osmextract/reference/openstreetmap_fr_zones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An sf object of geographical zones taken from download.openstreetmap.fr — openstreetmap_fr_zones","text":"sf object 1135 rows 7 columns: id unique ID area. used oe_update(). name , usually English, long-form name city. parent identifier next larger excerpts contains one, present. level integer code 1 4. Check http://download.openstreetmap.fr/polygons/ understand hierarchical structure zones. 1L correspond biggest areas. used matching operations case spatial input. pbf Link latest .osm.pbf file region. pbf_file_size Size pbf file bytes. geometry sfg geographical region, rectangular. See also oe_get_boundary() extract proper geographical boundaries.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/openstreetmap_fr_zones.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An sf object of geographical zones taken from download.openstreetmap.fr — openstreetmap_fr_zones","text":"https://download.bbbike.org/osm/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/osmextract-package.html","id":null,"dir":"Reference","previous_headings":"","what":"osmextract: Download and Import Open Street Map Data Extracts — osmextract-package","title":"osmextract: Download and Import Open Street Map Data Extracts — osmextract-package","text":"Match, download, convert import Open Street Map data extracts obtained several providers.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/reference/osmextract-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"osmextract: Download and Import Open Street Map Data Extracts — osmextract-package","text":"Maintainer: Andrea Gilardi andrea.gilardi@polimi.(ORCID) Authors: Robin Lovelace (ORCID) contributors: Barry Rowlingson (ORCID) [contributor] Salva Fernández (Salva reviewed package (v. 0.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/395>) [reviewer] Nicholas Potter (Nicholas reviewed package (v. 0.1) rOpenSci, see <https://github.com/ropensci/software-review/issues/395>) [reviewer]","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/read_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a .poly file. — read_poly","title":"Read a .poly file. — read_poly","text":"Read .poly file.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/read_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a .poly file. — read_poly","text":"","code":"read_poly(input, crs = \"OGC:CRS84\", ...)"},{"path":"https://docs.ropensci.org/osmextract/reference/read_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a .poly file. — read_poly","text":"input Character vector representing polygon object saved using .poly format. Can also path file URL pointing valid .poly file. crs Coordinate Reference System (CRS) input polygon. ... arguments passed readLines() (function used read external .poly files).","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/read_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a .poly file. — read_poly","text":"sfc_MULTIPOLYGON/sfc object.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/read_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a .poly file. — read_poly","text":"Polygon Filter File Format (.poly) defined . code behind function inspired parse_poly function defined . Geofabrik stores .poly files used generate extracts. Furthermore, nice collection exact-border poly files created cities OSM Relation ID available git repository github: https://github.com/jameschevalier/cities. default value crs argument \"OGC:CRS84\" instead \"4326\" \"EPSG:4326\" since, definition, coordinates provided \"longitude, latitude\" (differences relevant sf::st_axis_order() TRUE).","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/read_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a .poly file. — read_poly","text":"","code":"toy_poly <- c(   \"test_poly\",   \"first_area\",   \"0 0\",   \"0 1\",   \"1 1\",   \"1 0\",   \"0 0\",   \"END\",   \"END\" ) (out <- read_poly(toy_poly)) #> Geometry set for 1 feature  #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 1 ymax: 1 #> Geodetic CRS:  WGS 84 #> MULTIPOLYGON (((0 0, 0 1, 1 1, 1 0, 0 0))) plot(out)   if (FALSE) { italy_poly <- \"https://download.geofabrik.de/europe/italy.poly\" plot(read_poly(italy_poly))}"},{"path":"https://docs.ropensci.org/osmextract/reference/test_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"An sf object of geographical zones taken from download.openstreetmap.fr — test_zones","title":"An sf object of geographical zones taken from download.openstreetmap.fr — test_zones","text":"object represent minimal provider's database used examples tests.","code":""},{"path":"https://docs.ropensci.org/osmextract/reference/test_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An sf object of geographical zones taken from download.openstreetmap.fr — test_zones","text":"","code":"test_zones"},{"path":"https://docs.ropensci.org/osmextract/reference/test_zones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An sf object of geographical zones taken from download.openstreetmap.fr — test_zones","text":"object class sf (inherits data.frame) 2 rows 7 columns.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-050","dir":"Changelog","previous_headings":"","what":"osmextract 0.5.0","title":"osmextract 0.5.0","text":"CRAN release: 2023-08-10","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"major-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"osmextract 0.5.0","text":"Fixed bug oe_match() occurred every time function found exact match input place non-default OSM data provider (.e. everything Geofabrik). cases, downloaded file named geofabrik_xyz.osm.pbf instead differentprovider_xyz.osm.pbf. Reported @GretaTimaite, thanks. See #246. major bug , safety, suggest erase .pbf .gpkg files currently stored persistent download directory (see also oe_clean()). Fixed bug oe_get_keys() occurred value given key either empty equal \\n (#250). Fixed bug oe_vectortranslate() occurred attributes specified extra_tags argument included character :. fact, presence attributes like “lanes:left” always triggered vectortranslate operations (#260). implemented new function named oe_get_boundary() can used obtain administrative geographical boundaries given area (#206). Added new function named read_poly() read .poly files (#277). databases storing data supported providers updated. simplicity, fields removed saved objects. precisely, removed columns pbf.internal, history, taginfo, updates, bz2, shp geofabrik_zones; last_modified, type, base_url poly_url bbbike_zones. function oe_match_pattern() now accepts numeric/sfc/bbox/sf inputs, following logic oe_match() (#266).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"minor-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR CHANGES","title":"osmextract 0.5.0","text":"boundary argument can specified using bbox objects. bbox object converted sfc object sf::st_as_sfc() preserves CRS. Added informative error message oe_get() oe_read() run empty unnamed arguments ... (#234 #241). function oe_get_keys() gains new argument named download_directory can used specify path directory stores .osm.pbf files. Included new function named oe_clean() remove .pbf .gpkg files stored given directory. Default value oe_download_directory(). Added message oe_download() removed warning oe_read(). message printed every time user downloads new OSM extract certain provider, whereas warning used raised given query selected layer different layer argument (#240). Added two new parameters oe_find() named return_pbf return_gpkg. can used select file formats function return (#253). Added informative error message case oe_download() fails, explaining partially downloaded .pbf files removed avoid problems running functions (#221). experimenting new (.e. third edition) features testthat implemented -called test-fixtures run tests isolated environment (#255). however still experimental us. Added informative error warning messages oe_get_keys() (#251). file path returned oe_download() specified using / instead \\\\ separator Windows. oe_download() takes account timeout option . Unfortunately, forgot adjust code switching download.file httr. oe_vectortranslate() function tries correct possible geometrical problem(s) input boundary using sf::st_make_valid(). Updated geofabrik_zones database (#270).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"documentation-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"osmextract 0.5.0","text":"Update description boundary boundary_type arguments. main vignette examples save files tempdir() (#247).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-041","dir":"Changelog","previous_headings":"","what":"osmextract 0.4.1","title":"osmextract 0.4.1","text":"CRAN release: 2022-08-26 Help files man/ re-generated, give rise valid HTML5 (#259).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-040","dir":"Changelog","previous_headings":"","what":"osmextract 0.4.0","title":"osmextract 0.4.0","text":"CRAN release: 2021-10-27","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"major-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"osmextract 0.4.0","text":"Import two new packages: httr jsonlite (#231, #232). Improved approach adopted download files web. particular, functions oe_download() oe_search() now take advantage httr functionalities. return informative messages case errors (#231, #232). Vignettes examples require internet connection.","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"osmextract 0.4.0","text":"Fixed bug oe_vectortranslate() occurred reading multilinestrings other_relations layers one extra tags (#229). Fixed bug oe_get()/oe_read() return warning message reading existing GPKG file query argument.","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"minor-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR CHANGES","title":"osmextract 0.4.0","text":"duplicated fields extra_tags now removed modifying osmconf.ini file. Duplicated tags means something like extra_tags = c(\"\", \"\") even fields included default (.e. extra_tags = \"highway\" lines layer). See discussion #229.","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-031","dir":"Changelog","previous_headings":"","what":"osmextract 0.3.1","title":"osmextract 0.3.1","text":"CRAN release: 2021-07-27","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"major-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"osmextract 0.3.1","text":"Added new (still experimental) function named oe_get_network() import road network used specific mode transport. moment, support following modes transport: cycling (default), walking, driving. Check ?oe_get_network details examples (#218).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"minor-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"MINOR CHANGES","title":"osmextract 0.3.1","text":"layer argument now converted lower case checking required layer admissible. Adjusted code behind oe_get() oe_vectortranslate() sf v1.0.2. Remove call suppressMessages() oe_match() (#217).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"documentation-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"osmextract 0.3.1","text":"Slightly changed description package. Added .Rd file documenting whole package. Slightly changed description parameter place.","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-030","dir":"Changelog","previous_headings":"","what":"osmextract 0.3.0","title":"osmextract 0.3.0","text":"CRAN release: 2021-06-10","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"major-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"osmextract 0.3.0","text":"oe_get_keys() function can used extract values associated keys. also defined ad-hoc printing method fixed several bugs. examples improved. Moreover, function tries match input zone one OSM extracts previously downloaded (#201 #196). parameter place represents sf/sfc/bbox object missing CRS, oe_match() raises warning message sets CRS = 4326. relevant consequences functions (like oe_get()) wrap oe_match(). Starting sf > 0.9.8, function oe_vectortranslate() stops error problem argument vectortranslate_options quiet = FALSE (instead raising warning crashing R session). See details. options c(\"-f\", \"GPKG\", \"-overwrite\", \"-oo\", \"CONFIG_FILE=\", path--config-file, \"-lco\", \"GEOMETRY_NAME=geometry\", layer) always appended end vectortranslate_options argument unless user explicitly sets different default parameters arguments -f, -oo -lco (#200). believe sensible defaults can help users creating less verbose specifications ogr2ogr utility. create two new arguments oe_vectortranslate() (therefore also oe_get() oe_read()) named boundary boundary_type. can used create ad-hoc spatial filter vectortranslate operations (create even less verbose specifications vectortranslate_options argument). See docs introductory vignette details. argument provider removed oe_match_pattern() since function automatically checks available providers (#208).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"osmextract 0.3.0","text":"parameter force_vectortranslate checked reading layers existing gpkg file. force_vectortranslate TRUE, oe_vectortranslate() doesn’t check existing layers. important user run oe_vectortranslate() stopping vectortranslate process. arguments extra_tags osmconf_ini ignored vectortranslate_options NULL (#182). Fix provider’s data objects sf v1.0 (#194).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"osmextract 0.3.0","text":"arguments passed oe_read() via ... compared formals st_read.character, st_as_sf.data.frame, read_sf. Added new method oe_match bbox objects (#185). oe_get_keys() function can applied .osm.pbf objects (#188).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"documentation-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"osmextract 0.3.0","text":"Improved several examples fixed small bug documentation oe_match(). Fix several typos vignettes docs.","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"others-0-3-0","dir":"Changelog","previous_headings":"","what":"OTHERS","title":"osmextract 0.3.0","text":"Created new space github repo named Discussion conversations, ask questions post answers without opening issues. Link: https://github.com/ropensci/osmextract/discussions. Tests require internet connection now skipped CRAN (#189).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-021","dir":"Changelog","previous_headings":"","what":"osmextract 0.2.1","title":"osmextract 0.2.1","text":"CRAN release: 2021-02-15 minor release. modified several examples tests fix several errors noticed CRAN tests (#175).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-020","dir":"Changelog","previous_headings":"","what":"osmextract 0.2.0","title":"osmextract 0.2.0","text":"CRAN release: 2021-02-11 Published CRAN!","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"osmextract 0.2.0","text":"Add level parameter oe_match(). used choose multiple hierarchically nested OSM extracts. default behaviour select smallest administrative unit (#160). Modify behaviour oe_match(). function checks implemented providers case input place matched geographical zone chosen provider (#155). Add simple interface Nominatim API enables oe_match() geolocate text strings found providers (#155).","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"osmextract 0.2.0","text":"Normalise paths managed oe_download_directory oe_download (#150 #161) oe_get_keys returns informative error other_tags field input file (#158)","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"osmextract 0.2.0","text":"Fix structure geofabrik_zones object (#167) Fix warning messages related … oe_get() (#152)","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"documentation-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"osmextract 0.2.0","text":"Simplify several warning messages case spatial matching Simplify startup message (#156) Add details related download timeouts (#145) Documented values returned oe_find() oe_search()","code":""},{"path":"https://docs.ropensci.org/osmextract/news/index.html","id":"osmextract-010","dir":"Changelog","previous_headings":"","what":"osmextract 0.1.0","title":"osmextract 0.1.0","text":"Finish development main functions Submit rOpenSci peer-review","code":""}]
